= Labs Quadrangulate =

#type: node
#context: sop
#internal: labs::sop_quadrangulate
#icon: quadrangulate
#tags: sidefxlabs,  model, gamedev, cleanup

""" Simple Node to take a triangulated mesh and attempt to collapse the diagonal edges to return the mesh to a quad dominant state """

The Quadrangulate Node is designed to remove obvious edges from a triangulated mesh in order to return to what the original quaded mesh would've looked like. 

It works by iterating over all of the edges on a primitive and isolating the longest one. In Fast Mode that's all it does and it deletes the longest edges. 

With Fast Mode disabled, it looks for conflicting primitives, where a primitive pair doesn't agree on what it's longest edges are. All this means is that we tag each "long edge" and for it to be a valid original quad, 
the long edge should be tagged twice. If it's tagged only once it could still be a valid quad, but usually it means that the original quad wasn't perfectly squared and likely skewed. 

If the original quads had mostly even length edges, this algorithm works great. If the original quads were somewhat skewed, it is harder to determine if there was a quad there in the first place or if it was a triangle. 

Below you can see the results on the Rubber Toy

:compare_images:
    #image1: /images/quadrangulate_before.png
    #image2: /images/quadrangulate_after.png

@parameters

	Ignore Edges: 
		Edges that will be left alone and not collapsed. Helpful if you want to protect a certain edge from being deleted
		
	Force Remove Edges:
		Edge that will be forcefully removed. Helpful if there are specific edges that the user wants to remove that the algorithm doesn't pick up 
		
	Fast Mode:
		Fast Mode skips a second pass to resolve quads where the longest edge isn't agreed upon by 2 neighborhing triangles.
		
	Ignore Boundary Edges:
		Protect Boundary Edges from being collapsed
		
	Ensure Max Edges:
		Restrict the number of edges on the final polygons to be equal or less than this value.
		