<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="axiom_v02_b001" label="Axiom v02 b001">
    <memberTool name="axiom_sourceShape_v02_b001"/>
    <memberTool name="axiom_sourceVDBs_v02_b001"/>
    <memberTool name="axiom_smoke_v02_b001"/>
    <memberTool name="axiom_explosion_v02_b001"/>
  </toolshelf>

  <tool name="axiom_sourceShape_v02_b001" label="Source Shape" icon="opdef:/Sop/axiom_sourceShape::02.001?IconImage">
    <script scriptType="python"><![CDATA[hou_node = hou.node("/obj").createNode("geo", node_name="axiom_sourceShapes")


hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.setAutoscope((True, True, True))


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node

# Code for /obj/axiom_sourceShape_demo/axiom_sourceShape
hou_node = hou_parent.createNode("axiom_sourceShape", "axiom_sourceShape", run_init_scripts=False, load_contents=True)
hou_node.move(hou.Vector2(-2.98474, 0.912271))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom_sourceShape_demo/axiom_sourceShape_collision
hou_node = hou_parent.createNode("axiom_sourceShape", "axiom_sourceShape_collision", run_init_scripts=False, load_contents=True)
hou_node.move(hou.Vector2(0.971306, 0.912271))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/axiom_sourceShape_collision/type parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_sourceShape_collision")
hou_parm = hou_node.parm("type")
hou_parm.deleteAllKeyframes()
hou_parm.set("2")


# Code for /obj/axiom_sourceShape_demo/axiom_sourceShape_collision/shape parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_sourceShape_collision")
hou_parm = hou_node.parm("shape")
hou_parm.deleteAllKeyframes()
hou_parm.set("2")


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom_sourceShape_demo/merge_sourceShapes
hou_node = hou_parent.createNode("merge", "merge_sourceShapes", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(3.35548, -3.26834))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)
hou_node.setColor(hou.Color([0.306, 0.306, 0.306]))
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/axiom_sourceShape_sink
hou_node = hou_parent.createNode("axiom_sourceShape", "axiom_sourceShape_sink", run_init_scripts=False, load_contents=True)
hou_node.move(hou.Vector2(5.26448, 0.912271))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/axiom_sourceShape_sink/type parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_sourceShape_sink")
hou_parm = hou_node.parm("type")
hou_parm.deleteAllKeyframes()
hou_parm.set("3")


# Code for /obj/axiom_sourceShape_demo/axiom_sourceShape_sink/shape parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_sourceShape_sink")
hou_parm = hou_node.parm("shape")
hou_parm.deleteAllKeyframes()
hou_parm.set("2")


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom_sourceShape_demo/transform_sink
hou_node = hou_parent.createNode("xform", "transform_sink", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.26448, -0.287241))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/transform_sink/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/transform_sink")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((16, 8, 0))


# Code for /obj/axiom_sourceShape_demo/transform_sink/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/transform_sink")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((4, 1, 4))


hou_node.setColor(hou.Color([0.306, 0.306, 0.306]))
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/axiom_solver
hou_node = hou_parent.createNode("axiom_solver", "axiom_solver", run_init_scripts=False, load_contents=True)
hou_node.move(hou.Vector2(3.35548, -4.76075))
hou_node.bypass(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(True)
hou_node.setTemplateFlag(True)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/axiom_solver/startFrame parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("startFrame")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/divisionSize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("divisionSize")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.050000000000000003)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/description parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("description")
hou_parm.deleteAllKeyframes()
hou_parm.set("GPU:    GeForce RTX 2080")


# Code for /obj/axiom_sourceShape_demo/axiom_solver/openVDBMajorVersion parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("openVDBMajorVersion")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/openVDBMinorVersion parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("openVDBMinorVersion")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/disturbance1BlockSize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("disturbance1BlockSize")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/disturbance2BlockSize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("disturbance2BlockSize")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for /obj/axiom_sourceShape_demo/axiom_solver/dissipationRamp1value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("dissipationRamp1value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/dissipationRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("dissipationRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/dissipationRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("dissipationRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.25)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/coolingRateRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("coolingRateRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/coolingRateRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("coolingRateRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/windRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("windRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/windRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("windRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/disturbance1Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("disturbance1Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/disturbance1Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("disturbance1Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/disturbance2Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("disturbance2Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/disturbance2Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("disturbance2Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/turbulence1Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("turbulence1Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/turbulence1Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("turbulence1Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/turbulence2Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("turbulence2Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/turbulence2Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("turbulence2Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/confinementRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("confinementRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/confinementRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("confinementRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/ignitionTemperatureRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("ignitionTemperatureRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/ignitionTemperatureRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("ignitionTemperatureRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/colorRamp1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm_tuple = hou_node.parmTuple("colorRamp1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.29588711261749268, 0.36125144362449646, 0.5))


# Code for /obj/axiom_sourceShape_demo/axiom_solver/colorRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("colorRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.24265842139720917)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/colorRamp2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm_tuple = hou_node.parmTuple("colorRamp2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.047032315284013748, 0.10041522234678268, 0.44179984927177429))


# Code for /obj/axiom_sourceShape_demo/axiom_solver/colorRamp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("colorRamp3pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/colorRamp3c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm_tuple = hou_node.parmTuple("colorRamp3c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 0.5, 0.2703932523727417))


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom_sourceShape_demo/duplicate_source
hou_node = hou_parent.createNode("copyxform", "duplicate_source", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(-2.98474, -0.287241))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/duplicate_source/ncy parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/duplicate_source")
hou_parm = hou_node.parm("ncy")
hou_parm.deleteAllKeyframes()
hou_parm.set(3)


# Code for /obj/axiom_sourceShape_demo/duplicate_source/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/duplicate_source")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((16, 0, 0))


hou_node.setColor(hou.Color([0.306, 0.306, 0.306]))
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/transform_collision
hou_node = hou_parent.createNode("xform", "transform_collision", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(0.971306, -0.287241))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/transform_collision/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/transform_collision")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 8, 0))


# Code for /obj/axiom_sourceShape_demo/transform_collision/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/transform_collision")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((4, 1, 4))


hou_node.setColor(hou.Color([0.306, 0.306, 0.306]))
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/axiom_sourceShape_influence
hou_node = hou_parent.createNode("axiom_sourceShape", "axiom_sourceShape_influence", run_init_scripts=False, load_contents=True)
hou_node.move(hou.Vector2(9.52457, 0.912271))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/axiom_sourceShape_influence/type parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_sourceShape_influence")
hou_parm = hou_node.parm("type")
hou_parm.deleteAllKeyframes()
hou_parm.set("1")


# Code for /obj/axiom_sourceShape_demo/axiom_sourceShape_influence/shape parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_sourceShape_influence")
hou_parm = hou_node.parm("shape")
hou_parm.deleteAllKeyframes()
hou_parm.set("2")


# Code for /obj/axiom_sourceShape_demo/axiom_sourceShape_influence/noise1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_sourceShape_influence")
hou_parm = hou_node.parm("noise1")
hou_parm.deleteAllKeyframes()
hou_parm.set(3)


# Code for /obj/axiom_sourceShape_demo/axiom_sourceShape_influence/forceType parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_sourceShape_influence")
hou_parm = hou_node.parm("forceType")
hou_parm.deleteAllKeyframes()
hou_parm.set("1")


# Code for /obj/axiom_sourceShape_demo/axiom_sourceShape_influence/forceDirection parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_sourceShape_influence")
hou_parm_tuple = hou_node.parmTuple("forceDirection")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 0, 0))


# Code for /obj/axiom_sourceShape_demo/axiom_sourceShape_influence/forceMagnitude parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_sourceShape_influence")
hou_parm = hou_node.parm("forceMagnitude")
hou_parm.deleteAllKeyframes()
hou_parm.set(10)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom_sourceShape_demo/transform_influence
hou_node = hou_parent.createNode("xform", "transform_influence", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(9.52457, -0.287241))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/transform_influence/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/transform_influence")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((32, 8, 0))

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("16*2", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("16*2", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("16*2", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)


# Code for /obj/axiom_sourceShape_demo/transform_influence/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/transform_influence")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((4, 1, 4))


hou_node.setColor(hou.Color([0.306, 0.306, 0.306]))
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code to establish connections for /obj/axiom_sourceShape_demo/merge_sourceShapes
hou_node = hou_parent.node("merge_sourceShapes")
if hou_parent.node("duplicate_source") is not None:
    hou_node.setInput(0, hou_parent.node("duplicate_source"), 0)
if hou_parent.node("transform_collision") is not None:
    hou_node.setInput(1, hou_parent.node("transform_collision"), 0)
if hou_parent.node("transform_sink") is not None:
    hou_node.setInput(2, hou_parent.node("transform_sink"), 0)
if hou_parent.node("transform_influence") is not None:
    hou_node.setInput(3, hou_parent.node("transform_influence"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/transform_sink
hou_node = hou_parent.node("transform_sink")
if hou_parent.node("axiom_sourceShape_sink") is not None:
    hou_node.setInput(0, hou_parent.node("axiom_sourceShape_sink"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/axiom_solver
hou_node = hou_parent.node("axiom_solver")
if hou_parent.node("merge_sourceShapes") is not None:
    hou_node.setInput(1, hou_parent.node("merge_sourceShapes"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/duplicate_source
hou_node = hou_parent.node("duplicate_source")
if hou_parent.node("axiom_sourceShape") is not None:
    hou_node.setInput(0, hou_parent.node("axiom_sourceShape"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/transform_collision
hou_node = hou_parent.node("transform_collision")
if hou_parent.node("axiom_sourceShape_collision") is not None:
    hou_node.setInput(0, hou_parent.node("axiom_sourceShape_collision"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/transform_influence
hou_node = hou_parent.node("transform_influence")
if hou_parent.node("axiom_sourceShape_influence") is not None:
    hou_node.setInput(0, hou_parent.node("axiom_sourceShape_influence"), 0)

# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()]]></script>
  </tool>

  <tool name="axiom_sourceVDBs_v02_b001" label="Source VDBs" icon="opdef:/Sop/axiom_solver::02.001?axiom_vdb_icon_sRGB.png">
    <script scriptType="python"><![CDATA[# Initialize parent node variable.
if locals().get("hou_parent") is None:
    hou_parent = hou.node("/obj")

# Code for /obj/axiom_sourceShape_demo
hou_node = hou_parent.createNode("geo", "axiom_sourceVDBs", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(-3.7879, 1.34259))
hou_node.setSelectableInViewport(True)
hou_node.showOrigin(False)
hou_node.useXray(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setSelected(False)

hou_parm_template_group = hou.ParmTemplateGroup()
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4", "Transform", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("xOrd", "Transform Order", menu_items=(["srt","str","rst","rts","tsr","trs"]), menu_labels=(["Scale Rot Trans","Scale Trans Rot","Rot Scale Trans","Rot Trans Scale","Trans Scale Rot","Trans Rot Scale"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("rOrd", "Rotate Order", menu_items=(["xyz","xzy","yxz","yzx","zxy","zyx"]), menu_labels=(["Rx Ry Rz","Rx Rz Ry","Ry Rx Rz","Ry Rz Rx","Rz Rx Ry","Rz Ry Rx"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hideLabel(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("t", "Translate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 0)", "script_action_help": "Select an object to match the translation with.", "script_action_icon": "BUTTONS_match_transform"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("r", "Rotate", 3, default_value=([0, 0, 0]), min=0, max=360, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 1)", "script_action_help": "Select an object to match the rotation with.", "script_action_icon": "BUTTONS_match_rotation"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("s", "Scale", 3, default_value=([1, 1, 1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 2)", "script_action_help": "Select an object to match the scale with.", "script_action_icon": "BUTTONS_match_scale"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("p", "Pivot Translate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 3)", "script_action_help": "Select an object to match the pivot with.", "script_action_icon": "BUTTONS_match_pivot"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("pr", "Pivot Rotate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 4)", "script_action_help": "Select an object to match the pivot rotation with.", "script_action_icon": "BUTTONS_match_pivot_rotation"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("scale", "Uniform Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("pre_xform", "Modify Pre-Transform", menu_items=(["clean","cleantrans","cleanrot","cleanscales","extract","reset"]), menu_labels=(["Clean Transform","Clean Translates","Clean Rotates","Clean Scales","Extract Pre-transform","Reset Pre-transform"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("keeppos", "Keep Position When Parenting", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("childcomp", "Child Compensation", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("constraints_on", "Enable Constraints", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("constraints_path", "Constraints", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constraints_on == 0 }")
hou_parm_template2.setTags({"opfilter": "!!CHOP", "oprelative": ".", "script_action": "import objecttoolutils\nobjecttoolutils.constraintsMenu(kwargs)", "script_action_help": "", "script_action_icon": "BUTTONS_add_constraints"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookatpath", "Look At", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!OBJ!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookupobjpath", "Look Up Object", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!OBJ!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookup", "Look At Up Vector", 1, default_value=(["on"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["off","on","quat","pos","obj"]), menu_labels=(["Don't Use Up Vector","Use Up Vector","Use Quaternions","Use Global Position","Use Up Object"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pathobjpath", "Path Object", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!SOP!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("roll", "Roll", 1, default_value=([0]), min=-360, max=360, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Angle, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("pos", "Position", 1, default_value=([0]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("uparmtype", "Parameterization", menu_items=(["uniform","arc"]), menu_labels=(["Uniform","Arc Length"]), default_value=1, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("pathorient", "Orient Along Path", 1, default_value=([1]), min=0, max=1, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("up", "Orient Up Vector", 3, default_value=([0, 1, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Vector, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("bank", "Auto-Bank factor", 1, default_value=([0]), min=-1, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4_1", "Render", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("shop_materialpath", "Material", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setTags({"opfilter": "!!CUSTOM/MATERIAL!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("shop_materialopts", "Options", menu_items=([]), menu_labels=([]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Mini, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("tdisplay", "Display", default_value=False)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("display", "Display", 1, default_value=([1]), min=0, max=1, min_is_strict=True, max_is_strict=True, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("viewportlod", "Display As", menu_items=(["full","points","box","centroid","hidden","subd"]), menu_labels=(["Full Geometry","Point Cloud","Bounding Box","Centroid","Hidden","Subdivision Surface / Curves"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setHelp("Choose how the object's geometry should be rendered in the viewport")
hou_parm_template2.setTags({"spare_category": "Render"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_rendervisibility", "Render Visibility", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["*","primary","primary|shadow","-primary","-diffuse","-diffuse&-reflect&-refract",""]), menu_labels=(["Visible to all","Visible only to primary rays","Visible only to primary and shadow rays","Invisible to primary rays (Phantom)","Invisible to diffuse rays","Invisible to secondary rays","Invisible (Unrenderable)"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "rendervisibility", "spare_category": "Render"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vm_rendersubd", "Render Polygons As Subdivision (Mantra)", default_value=False)
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "rendersubd", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_subdstyle", "Subdivision Style", 1, default_value=(["mantra_catclark"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["mantra_catclark","osd_catclark"]), menu_labels=(["Mantra Catmull-Clark","OpenSubdiv Catmull-Clark"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "subdstyle", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_subdgroup", "Subdivision Group", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "subdgroup", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("vm_osd_quality", "Open Subdiv Quality", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_quality", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("vm_osd_vtxinterp", "OSD Vtx Interp", 1, default_value=([2]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["No vertex interpolation","Edges only","Edges and Corners"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_vtxinterp", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("vm_osd_fvarinterp", "OSD FVar Interp", 1, default_value=([4]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2","3","4","5"]), menu_labels=(["Smooth everywhere","Sharpen corners only","Sharpen edges and corners","Sharpen edges and propagated corners","Sharpen all boundaries","Bilinear interpolation"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_fvarinterp", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0", "Shading", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("categories", "Categories", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("A list of tags which can be used to select the object")
hou_parm_template3.setTags({"spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("reflectmask", "Reflection Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Objects that will be reflected on this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/GEOMETRY!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("refractmask", "Refraction Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Objects that will be refracted on this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/GEOMETRY!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("lightmask", "Light Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Lights that illuminate this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/LIGHT!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("lightcategories", "Light Selection", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_lpetag", "LPE Tag", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "lpetag", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_volumefilter", "Volume Filter", 1, default_value=(["box"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["box","gaussian","bartlett","catrom","hanning","blackman","sinc"]), menu_labels=(["Box Filter","Gaussian","Bartlett (triangle)","Catmull-Rom","Hanning","Blackman","Sinc (sharpening)"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "filter", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_volumefilterwidth", "Volume Filter Width", 1, default_value=([1]), min=0.001, max=5, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "filterwidth", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_matte", "Matte shading", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "matte", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rayshade", "Raytrace Shading", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rayshade", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_1", "Sampling", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("geo_velocityblur", "Geometry Velocity Blur", menu_items=(["off","on","accelblur"]), menu_labels=(["No Velocity Blur","Velocity Blur","Acceleration Blur"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ allowmotionblur == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("geo_accelattribute", "Acceleration Attribute", 1, default_value=(["accel"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ geo_velocityblur != accelblur }")
hou_parm_template3.setTags({"spare_category": "Sampling"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_2", "Dicing", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_shadingquality", "Shading Quality", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "shadingquality", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_flatness", "Dicing Flatness", 1, default_value=([0.05]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "flatness", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_raypredice", "Ray Predicing", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["Disable Predicing","Full Predicing","Precompute Bounds"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "raypredice", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_curvesurface", "Shade Curves As Surfaces", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "curvesurface", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_3", "Geometry", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rmbackface", "Backface Removal", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rmbackface", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("shop_geometrypath", "Procedural Shader", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"opfilter": "!!SHOP/GEOMETRY!!", "oprelative": ".", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_forcegeometry", "Force Procedural Geometry Output", default_value=True)
hou_parm_template3.setTags({"spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rendersubdcurves", "Render Polygon Curves As Subdivision (Mantra)", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rendersubdcurves", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_renderpoints", "Render As Points (Mantra)", 1, default_value=([2]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["No Point Rendering","Render Only Points","Render Unconnected Points"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "renderpoints", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_renderpointsas", "Render Points As (Mantra)", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1"]), menu_labels=(["Spheres","Circles"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "renderpointsas", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_usenforpoints", "Use N For Point Rendering", default_value=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "usenforpoints", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_pointscale", "Point Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "pointscale", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_pscalediameter", "Treat Point Scale as Diameter Instead of Radius", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "pscalediameter", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_metavolume", "Metaballs as Volume", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "metavolume", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_coving", "Coving", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["Disable Coving","Coving for displacement/sub-d","Coving for all primitives"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "coving", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_materialoverride", "Material Override", 1, default_value=(["compact"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["none","full","compact"]), menu_labels=(["Disabled","Evaluate for Each Primitve/Point","Evaluate Once"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_overridedetail", "Ignore Geometry Attribute Shaders", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "overridedetail", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_procuseroottransform", "Proc Use Root Transform", default_value=True)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "procuseroottransform", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4_2", "Misc", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("use_dcolor", "Set Wireframe Color", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("dcolor", "Wireframe Color", 3, default_value=([1, 1, 1]), min=0, max=1, min_is_strict=True, max_is_strict=True, look=hou.parmLook.ColorSquare, naming_scheme=hou.parmNamingScheme.RGBA)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("picking", "Viewport Selecting Enabled", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pickscript", "Select Script", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.FileReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"filechooser_mode": "read"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("caching", "Cache Object Transform", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vport_shadeopen", "Shade Open Curves In Viewport", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vport_displayassubdiv", "Display as Subdivision in Viewport", default_value=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("vport_onionskin", "Onion Skinning", menu_items=(["off","xform","on"]), menu_labels=(["Off","Transform only","Full Deformation"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
hou_node.setParmTemplateGroup(hou_parm_template_group)
# Code for /obj/axiom_sourceShape_demo/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom_sourceShape_demo/r parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo")
hou_parm_tuple = hou_node.parmTuple("r")
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom_sourceShape_demo/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.setAutoscope((True, True, True))


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node

# Code for /obj/axiom_sourceShape_demo/merge_vdbs
hou_node = hou_parent.createNode("merge", "merge_vdbs", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.83925, -3.81372))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)
hou_node.setColor(hou.Color([0.306, 0.306, 0.306]))
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/axiom_solver
hou_node = hou_parent.createNode("axiom_solver", "axiom_solver", run_init_scripts=False, load_contents=True)
hou_node.move(hou.Vector2(5.83925, -5.30613))
hou_node.bypass(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(True)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/axiom_solver/resetSim parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("resetSim")
hou_parm.deleteAllKeyframes()
hou_parm.set("0")


# Code for /obj/axiom_sourceShape_demo/axiom_solver/folder01 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("folder01")
hou_parm.deleteAllKeyframes()
hou_parm.set(6)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/startFrame parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("startFrame")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/divisionSize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("divisionSize")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.050000000000000003)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/description parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("description")
hou_parm.deleteAllKeyframes()
hou_parm.set("GPU:    GeForce RTX 2080")


# Code for /obj/axiom_sourceShape_demo/axiom_solver/openVDBMajorVersion parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("openVDBMajorVersion")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/openVDBMinorVersion parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("openVDBMinorVersion")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/sourceDensity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("sourceDensity")
hou_parm.deleteAllKeyframes()
hou_parm.set(2)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/sourceTemperature parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("sourceTemperature")
hou_parm.deleteAllKeyframes()
hou_parm.set(2)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/disturbance1BlockSize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("disturbance1BlockSize")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/disturbance2BlockSize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("disturbance2BlockSize")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/licenses parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("licenses")
hou_parm.deleteAllKeyframes()
hou_parm.set(0)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/dissipationRamp1value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("dissipationRamp1value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/dissipationRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("dissipationRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/dissipationRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("dissipationRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.25)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/coolingRateRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("coolingRateRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/coolingRateRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("coolingRateRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/windRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("windRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/windRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("windRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/disturbance1Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("disturbance1Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/disturbance1Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("disturbance1Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/disturbance2Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("disturbance2Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/disturbance2Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("disturbance2Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/turbulence1Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("turbulence1Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/turbulence1Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("turbulence1Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/turbulence2Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("turbulence2Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/turbulence2Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("turbulence2Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/confinementRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("confinementRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/confinementRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("confinementRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/ignitionTemperatureRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("ignitionTemperatureRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/ignitionTemperatureRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("ignitionTemperatureRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/colorRamp1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm_tuple = hou_node.parmTuple("colorRamp1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.29588711261749268, 0.36125144362449646, 0.5))


# Code for /obj/axiom_sourceShape_demo/axiom_solver/colorRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("colorRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.24265842139720917)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/colorRamp2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm_tuple = hou_node.parmTuple("colorRamp2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.047032315284013748, 0.10041522234678268, 0.44179984927177429))


# Code for /obj/axiom_sourceShape_demo/axiom_solver/colorRamp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm = hou_node.parm("colorRamp3pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/axiom_solver/colorRamp3c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/axiom_solver")
hou_parm_tuple = hou_node.parmTuple("colorRamp3c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 0.5, 0.2703932523727417))


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_source
hou_node = hou_parent.createNode("vdbfrompolygons", "vdbFromPolygons_source", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(0.0540284, 0.827471))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_source/builddistance parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_source")
hou_parm = hou_node.parm("builddistance")
hou_parm.deleteAllKeyframes()
hou_parm.set(0)


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_source/buildfog parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_source")
hou_parm = hou_node.parm("buildfog")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_source/fillinterior parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_source")
hou_parm = hou_node.parm("fillinterior")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_source/numattrib parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_source")
hou_parm = hou_node.parm("numattrib")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/sphere
hou_node = hou_parent.createNode("sphere", "sphere", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(0.0540284, 3.05168))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/IN_sourceGeo
hou_node = hou_parent.createNode("null", "IN_sourceGeo", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(0.0540284, 1.96149))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

hou_node.setColor(hou.Color([0, 0, 0]))
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_collision
hou_node = hou_parent.createNode("vdbfrompolygons", "vdbFromPolygons_collision", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.83925, -1.28493))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_collision/distancename parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_collision")
hou_parm = hou_node.parm("distancename")
hou_parm.deleteAllKeyframes()
hou_parm.set("collision")


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_collision/fillinterior parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_collision")
hou_parm = hou_node.parm("fillinterior")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_collision/numattrib parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_collision")
hou_parm = hou_node.parm("numattrib")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_collision/attribute1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_collision")
hou_parm = hou_node.parm("attribute1")
hou_parm.deleteAllKeyframes()
hou_parm.set("point.v")


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_collision/attributevdbname1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_collision")
hou_parm = hou_node.parm("attributevdbname1")
hou_parm.deleteAllKeyframes()
hou_parm.set("collisionVel")


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_collision/vectype1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_collision")
hou_parm = hou_node.parm("vectype1")
hou_parm.deleteAllKeyframes()
hou_parm.set("contravariant relative")


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/IN_collisionGeo
hou_node = hou_parent.createNode("null", "IN_collisionGeo", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.83925, -0.150902))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

hou_node.setColor(hou.Color([0, 0, 0]))
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/box_collision
hou_node = hou_parent.createNode("box", "box_collision", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.83925, 3.25379))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/box_collision/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/box_collision")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 8, 0))


# Code for /obj/axiom_sourceShape_demo/box_collision/scale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/box_collision")
hou_parm = hou_node.parm("scale")
hou_parm.deleteAllKeyframes()
hou_parm.set(3)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/animate_collision
hou_node = hou_parent.createNode("xform", "animate_collision", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.83925, 2.14914))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/animate_collision/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/animate_collision")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.27919597362000775, 0, 0))

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("sin($FF*2)*8", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("sin($FF*2)*8", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("sin($FF*2)*8", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/computeVelocity_collision
hou_node = hou_parent.createNode("trail", "computeVelocity_collision", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.83925, 1.06652))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/computeVelocity_collision/result parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/computeVelocity_collision")
hou_parm = hou_node.parm("result")
hou_parm.deleteAllKeyframes()
hou_parm.set("velocity")


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/nameAsTemperature
hou_node = hou_parent.createNode("name", "nameAsTemperature", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(1.07329, -0.150902))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/nameAsTemperature/name1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/nameAsTemperature")
hou_parm = hou_node.parm("name1")
hou_parm.deleteAllKeyframes()
hou_parm.set("temperature")


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/mergeSources
hou_node = hou_parent.createNode("merge", "mergeSources", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(0.0540284, -1.28493))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_influence
hou_node = hou_parent.createNode("vdbfrompolygons", "vdbFromPolygons_influence", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(11.3983, -0.159121))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_influence/builddistance parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_influence")
hou_parm = hou_node.parm("builddistance")
hou_parm.deleteAllKeyframes()
hou_parm.set(0)


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_influence/buildfog parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_influence")
hou_parm = hou_node.parm("buildfog")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_influence/fogname parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_influence")
hou_parm = hou_node.parm("fogname")
hou_parm.deleteAllKeyframes()
hou_parm.set("influence")


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_influence/fillinterior parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_influence")
hou_parm = hou_node.parm("fillinterior")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_influence/numattrib parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_influence")
hou_parm = hou_node.parm("numattrib")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_influence/attribute1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_influence")
hou_parm = hou_node.parm("attribute1")
hou_parm.deleteAllKeyframes()
hou_parm.set("point.v")


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_influence/attributevdbname1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_influence")
hou_parm = hou_node.parm("attributevdbname1")
hou_parm.deleteAllKeyframes()
hou_parm.set("influenceVel")


# Code for /obj/axiom_sourceShape_demo/vdbFromPolygons_influence/vectype1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/vdbFromPolygons_influence")
hou_parm = hou_node.parm("vectype1")
hou_parm.deleteAllKeyframes()
hou_parm.set("contravariant relative")


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/box_influence
hou_node = hou_parent.createNode("box", "box_influence", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(11.3983, 3.14914))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/box_influence/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/box_influence")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.0076353292896484959, 3.7128181696666376, 0))


# Code for /obj/axiom_sourceShape_demo/box_influence/scale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/box_influence")
hou_parm = hou_node.parm("scale")
hou_parm.deleteAllKeyframes()
hou_parm.set(3)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/adVelAttr
hou_node = hou_parent.createNode("attribwrangle", "adVelAttr", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(11.3983, 2.14914))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom_sourceShape_demo/adVelAttr/snippet parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/adVelAttr")
hou_parm = hou_node.parm("snippet")
hou_parm.deleteAllKeyframes()
hou_parm.set("v@v = set(0,0,0);")


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom_sourceShape_demo/set_influenceVel
hou_node = hou_parent.createNode("volumevop", "set_influenceVel", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(11.3983, -1.28493))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

hou_parm_template_group = hou.ParmTemplateGroup()
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher", "Vex Setup", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("vexsrc", "Vex Source", menu_items=(["myself","shop","script"]), menu_labels=(["Myself","Shop","Script"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("shoppath", "Shop Path", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ vexsrc != shop }")
hou_parm_template2.setTags({"opfilter": "!!SHOP/CVEX!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("script", "Script", 1, default_value=(["null"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ vexsrc != script }")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ButtonParmTemplate("clear", "Re-load VEX Functions")
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ vexsrc != script }")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vop_compiler", "Compiler", 1, default_value=(["vcc -q $VOP_INCLUDEPATH -o $VOP_OBJECTFILE -e $VOP_ERRORFILE $VOP_SOURCEFILE"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ vexsrc != myself }")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ButtonParmTemplate("vop_forcecompile", "Force Compile")
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ vexsrc != myself }")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vex_cwdpath", "Evaluation Node Path", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setTags({"oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vex_outputmask", "Export Parameters", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vex_multithread", "Enable Multithreading", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher_1", "Volume Bindings", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vex_geometrygenerator", "Only Output Created Geometry", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vdb_signedflood", "Signed-Flood Fill Output SDF VDBs", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("autobind", "Autobind by Name", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("bindeach", "Bind Each to Density", default_value=False)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ autobind == 1 }")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("bindings", "Number of Bindings", folder_type=hou.folderType.MultiparmBlock, default_value=0, ends_tab_group=False)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ autobind == 1 } { bindeach == 1 }")
hou_parm_template2.setTags({"multistartoffset": "1"})
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("bindprimname#", "Primitive Name", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ autobind == 1 } { bindeach == 1 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("bindprim#", "Primitive", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ autobind == 1 } { bindeach == 1 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("bindname#", "VEX Parameter", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ autobind == 1 } { bindeach == 1 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vex_precision", "VEX Precision", 1, default_value=(["auto"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["auto","32","64"]), menu_labels=(["Auto","32","64"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FloatParmTemplate("P", "P", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.IntParmTemplate("ix", "IX", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.IntParmTemplate("iy", "IY", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.IntParmTemplate("iz", "IZ", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.IntParmTemplate("resx", "ResX", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.IntParmTemplate("resy", "ResY", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.IntParmTemplate("resz", "ResZ", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FloatParmTemplate("dPdx", "dPdx", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FloatParmTemplate("dPdy", "dPdy", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FloatParmTemplate("dPdz", "dPdz", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FloatParmTemplate("center", "Center", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FloatParmTemplate("Time", "Time", 1, default_value=([0]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FloatParmTemplate("Timeinc", "Timeinc", 1, default_value=([0]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FloatParmTemplate("Frame", "Frame", 1, default_value=([0]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.StringParmTemplate("OpInput2", "Second Input", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.StringParmTemplate("OpInput3", "Third Input", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.StringParmTemplate("OpInput4", "Fourth Input", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.StringParmTemplate("OpInput1", "First Input", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FloatParmTemplate("density", "density", 1, default_value=([0]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.hide(True)
hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "cvex"})
hou_parm_template_group.append(hou_parm_template)
hou_node.setParmTemplateGroup(hou_parm_template_group)
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node

# Code for /obj/axiom_sourceShape_demo/set_influenceVel/volumevopglobal1
hou_node = hou_parent.createNode("volumevopglobal", "volumevopglobal1", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(1.90579, 1.97631))
hou_node.setDebugFlag(False)
hou_node.setDetailLowFlag(False)
hou_node.setDetailMediumFlag(False)
hou_node.setDetailHighFlag(True)
hou_node.bypass(False)
hou_node.setCompressFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom_sourceShape_demo/set_influenceVel/volumevopoutput1
hou_node = hou_parent.createNode("volumevopoutput", "volumevopoutput1", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(6.64696, 3.67056))
hou_node.setDebugFlag(False)
hou_node.setDetailLowFlag(False)
hou_node.setDetailMediumFlag(False)
hou_node.setDetailHighFlag(True)
hou_node.bypass(False)
hou_node.setCompressFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom_sourceShape_demo/set_influenceVel/bind1
hou_node = hou_parent.createNode("bind", "bind1", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(11.2498, 0.67384))
hou_node.setDebugFlag(False)
hou_node.setDetailLowFlag(False)
hou_node.setDetailMediumFlag(False)
hou_node.setDetailHighFlag(True)
hou_node.bypass(False)
hou_node.setCompressFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

# Code for /obj/axiom_sourceShape_demo/set_influenceVel/bind1/parmname parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/set_influenceVel/bind1")
hou_parm = hou_node.parm("parmname")
hou_parm.deleteAllKeyframes()
hou_parm.set("influenceVel")


# Code for /obj/axiom_sourceShape_demo/set_influenceVel/bind1/parmtype parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/set_influenceVel/bind1")
hou_parm = hou_node.parm("parmtype")
hou_parm.deleteAllKeyframes()
hou_parm.set("vector")


# Code for /obj/axiom_sourceShape_demo/set_influenceVel/bind1/overridetype parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/set_influenceVel/bind1")
hou_parm = hou_node.parm("overridetype")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/set_influenceVel/bind1/useasparmdefiner parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/set_influenceVel/bind1")
hou_parm = hou_node.parm("useasparmdefiner")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom_sourceShape_demo/set_influenceVel/bind1/exportparm parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/set_influenceVel/bind1")
hou_parm = hou_node.parm("exportparm")
hou_parm.deleteAllKeyframes()
hou_parm.set("whenconnected")


# Code for /obj/axiom_sourceShape_demo/set_influenceVel/bind1/exportcontext parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/set_influenceVel/bind1")
hou_parm = hou_node.parm("exportcontext")
hou_parm.deleteAllKeyframes()
hou_parm.set("cvex")


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/set_influenceVel/turbnoise1
hou_node = hou_parent.createNode("turbnoise", "turbnoise1", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.55725, 0.67384))
hou_node.setDebugFlag(False)
hou_node.setDetailLowFlag(False)
hou_node.setDetailMediumFlag(False)
hou_node.setDetailHighFlag(True)
hou_node.bypass(False)
hou_node.setCompressFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

# Code for /obj/axiom_sourceShape_demo/set_influenceVel/turbnoise1/signature parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/set_influenceVel/turbnoise1")
hou_parm = hou_node.parm("signature")
hou_parm.deleteAllKeyframes()
hou_parm.set("v")


# Code for /obj/axiom_sourceShape_demo/set_influenceVel/turbnoise1/type parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/set_influenceVel/turbnoise1")
hou_parm = hou_node.parm("type")
hou_parm.deleteAllKeyframes()
hou_parm.set("snoise")


# Code for /obj/axiom_sourceShape_demo/set_influenceVel/turbnoise1/freq parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/set_influenceVel/turbnoise1")
hou_parm_tuple = hou_node.parmTuple("freq")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"freq1\")", hou.exprLanguage.Hscript)
hou_parm_tuple[1].setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"freq1\")", hou.exprLanguage.Hscript)
hou_parm_tuple[1].setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"freq1\")", hou.exprLanguage.Hscript)
hou_parm_tuple[1].setKeyframe(hou_keyframe)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"freq1\")", hou.exprLanguage.Hscript)
hou_parm_tuple[2].setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"freq1\")", hou.exprLanguage.Hscript)
hou_parm_tuple[2].setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"freq1\")", hou.exprLanguage.Hscript)
hou_parm_tuple[2].setKeyframe(hou_keyframe)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/set_influenceVel/mulconst1
hou_node = hou_parent.createNode("mulconst", "mulconst1", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(8.38783, 0.67384))
hou_node.setDebugFlag(False)
hou_node.setDetailLowFlag(False)
hou_node.setDetailMediumFlag(False)
hou_node.setDetailHighFlag(True)
hou_node.bypass(False)
hou_node.setCompressFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

# Code for /obj/axiom_sourceShape_demo/set_influenceVel/mulconst1/signature parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/set_influenceVel/mulconst1")
hou_parm = hou_node.parm("signature")
hou_parm.deleteAllKeyframes()
hou_parm.set("v")


# Code for /obj/axiom_sourceShape_demo/set_influenceVel/mulconst1/mulconst parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom_sourceShape_demo/set_influenceVel/mulconst1")
hou_parm = hou_node.parm("mulconst")
hou_parm.deleteAllKeyframes()
hou_parm.set(12)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code to establish connections for /obj/axiom_sourceShape_demo/set_influenceVel/volumevopoutput1
hou_node = hou_parent.node("volumevopoutput1")
if hou_parent.node("volumevopglobal1") is not None:
    hou_node.setInput(0, hou_parent.node("volumevopglobal1"), 1)
# Code to establish connections for /obj/axiom_sourceShape_demo/set_influenceVel/bind1
hou_node = hou_parent.node("bind1")
if hou_parent.node("mulconst1") is not None:
    hou_node.setInput(0, hou_parent.node("mulconst1"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/set_influenceVel/turbnoise1
hou_node = hou_parent.node("turbnoise1")
if hou_parent.node("volumevopglobal1") is not None:
    hou_node.setInput(1, hou_parent.node("volumevopglobal1"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/set_influenceVel/mulconst1
hou_node = hou_parent.node("mulconst1")
if hou_parent.node("turbnoise1") is not None:
    hou_node.setInput(0, hou_parent.node("turbnoise1"), 0)

# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom_sourceShape_demo/IN_influenceGeo
hou_node = hou_parent.createNode("null", "IN_influenceGeo", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(11.3983, 1.06652))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

hou_node.setColor(hou.Color([0, 0, 0]))
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code to establish connections for /obj/axiom_sourceShape_demo/merge_vdbs
hou_node = hou_parent.node("merge_vdbs")
if hou_parent.node("mergeSources") is not None:
    hou_node.setInput(0, hou_parent.node("mergeSources"), 0)
if hou_parent.node("vdbFromPolygons_collision") is not None:
    hou_node.setInput(1, hou_parent.node("vdbFromPolygons_collision"), 0)
if hou_parent.node("set_influenceVel") is not None:
    hou_node.setInput(2, hou_parent.node("set_influenceVel"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/axiom_solver
hou_node = hou_parent.node("axiom_solver")
if hou_parent.node("merge_vdbs") is not None:
    hou_node.setInput(0, hou_parent.node("merge_vdbs"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/vdbFromPolygons_source
hou_node = hou_parent.node("vdbFromPolygons_source")
if hou_parent.node("IN_sourceGeo") is not None:
    hou_node.setInput(0, hou_parent.node("IN_sourceGeo"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/IN_sourceGeo
hou_node = hou_parent.node("IN_sourceGeo")
if hou_parent.node("sphere") is not None:
    hou_node.setInput(0, hou_parent.node("sphere"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/vdbFromPolygons_collision
hou_node = hou_parent.node("vdbFromPolygons_collision")
if hou_parent.node("IN_collisionGeo") is not None:
    hou_node.setInput(0, hou_parent.node("IN_collisionGeo"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/IN_collisionGeo
hou_node = hou_parent.node("IN_collisionGeo")
if hou_parent.node("computeVelocity_collision") is not None:
    hou_node.setInput(0, hou_parent.node("computeVelocity_collision"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/animate_collision
hou_node = hou_parent.node("animate_collision")
if hou_parent.node("box_collision") is not None:
    hou_node.setInput(0, hou_parent.node("box_collision"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/computeVelocity_collision
hou_node = hou_parent.node("computeVelocity_collision")
if hou_parent.node("animate_collision") is not None:
    hou_node.setInput(0, hou_parent.node("animate_collision"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/nameAsTemperature
hou_node = hou_parent.node("nameAsTemperature")
if hou_parent.node("vdbFromPolygons_source") is not None:
    hou_node.setInput(0, hou_parent.node("vdbFromPolygons_source"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/mergeSources
hou_node = hou_parent.node("mergeSources")
if hou_parent.node("vdbFromPolygons_source") is not None:
    hou_node.setInput(0, hou_parent.node("vdbFromPolygons_source"), 0)
if hou_parent.node("nameAsTemperature") is not None:
    hou_node.setInput(1, hou_parent.node("nameAsTemperature"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/vdbFromPolygons_influence
hou_node = hou_parent.node("vdbFromPolygons_influence")
if hou_parent.node("IN_influenceGeo") is not None:
    hou_node.setInput(0, hou_parent.node("IN_influenceGeo"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/adVelAttr
hou_node = hou_parent.node("adVelAttr")
if hou_parent.node("box_influence") is not None:
    hou_node.setInput(0, hou_parent.node("box_influence"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/set_influenceVel
hou_node = hou_parent.node("set_influenceVel")
if hou_parent.node("vdbFromPolygons_influence") is not None:
    hou_node.setInput(0, hou_parent.node("vdbFromPolygons_influence"), 0)
# Code to establish connections for /obj/axiom_sourceShape_demo/IN_influenceGeo
hou_node = hou_parent.node("IN_influenceGeo")
if hou_parent.node("adVelAttr") is not None:
    hou_node.setInput(0, hou_parent.node("adVelAttr"), 0)

# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()]]></script>
  </tool>

  <tool name="axiom_smoke_v02_b001" label="Smoke" icon="opdef:/Sop/axiom_solver::02.001?axiom_smoke_icon_sRGB.png">
    <script scriptType="python"><![CDATA[# Initialize parent node variable.
if locals().get("hou_parent") is None:
    hou_parent = hou.node("/obj")

# Code for /obj/axiom
hou_node = hou_parent.createNode("subnet", "axiom", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(-0.924298, -0.0682981))
hou_node.setSelectableInViewport(True)
hou_node.showOrigin(False)
hou_node.useXray(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

# Code for /obj/axiom/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/r parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom")
hou_parm_tuple = hou_node.parmTuple("r")
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.setAutoscope((True, True, True))


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node

# Code for /obj/axiom/axiom
hou_node = hou_parent.createNode("geo", "axiom", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(3.1287, 3.61212))
hou_node.setSelectableInViewport(True)
hou_node.showOrigin(False)
hou_node.useXray(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

hou_parm_template_group = hou.ParmTemplateGroup()
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4", "Transform", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("xOrd", "Transform Order", menu_items=(["srt","str","rst","rts","tsr","trs"]), menu_labels=(["Scale Rot Trans","Scale Trans Rot","Rot Scale Trans","Rot Trans Scale","Trans Scale Rot","Trans Rot Scale"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("rOrd", "Rotate Order", menu_items=(["xyz","xzy","yxz","yzx","zxy","zyx"]), menu_labels=(["Rx Ry Rz","Rx Rz Ry","Ry Rx Rz","Ry Rz Rx","Rz Rx Ry","Rz Ry Rx"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hideLabel(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("t", "Translate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 0)", "script_action_help": "Select an object to match the translation with.", "script_action_icon": "BUTTONS_match_transform"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("r", "Rotate", 3, default_value=([0, 0, 0]), min=0, max=360, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 1)", "script_action_help": "Select an object to match the rotation with.", "script_action_icon": "BUTTONS_match_rotation"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("s", "Scale", 3, default_value=([1, 1, 1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 2)", "script_action_help": "Select an object to match the scale with.", "script_action_icon": "BUTTONS_match_scale"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("p", "Pivot Translate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 3)", "script_action_help": "Select an object to match the pivot with.", "script_action_icon": "BUTTONS_match_pivot"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("pr", "Pivot Rotate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 4)", "script_action_help": "Select an object to match the pivot rotation with.", "script_action_icon": "BUTTONS_match_pivot_rotation"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("scale", "Uniform Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("pre_xform", "Modify Pre-Transform", menu_items=(["clean","cleantrans","cleanrot","cleanscales","extract","reset"]), menu_labels=(["Clean Transform","Clean Translates","Clean Rotates","Clean Scales","Extract Pre-transform","Reset Pre-transform"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("keeppos", "Keep Position When Parenting", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("childcomp", "Child Compensation", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("constraints_on", "Enable Constraints", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("constraints_path", "Constraints", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constraints_on == 0 }")
hou_parm_template2.setTags({"opfilter": "!!CHOP", "oprelative": ".", "script_action": "import objecttoolutils\nobjecttoolutils.constraintsMenu(kwargs)", "script_action_help": "", "script_action_icon": "BUTTONS_add_constraints"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookatpath", "Look At", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!OBJ!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookupobjpath", "Look Up Object", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!OBJ!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookup", "Look At Up Vector", 1, default_value=(["on"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["off","on","quat","pos","obj"]), menu_labels=(["Don't Use Up Vector","Use Up Vector","Use Quaternions","Use Global Position","Use Up Object"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pathobjpath", "Path Object", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!SOP!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("roll", "Roll", 1, default_value=([0]), min=-360, max=360, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Angle, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("pos", "Position", 1, default_value=([0]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("uparmtype", "Parameterization", menu_items=(["uniform","arc"]), menu_labels=(["Uniform","Arc Length"]), default_value=1, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("pathorient", "Orient Along Path", 1, default_value=([1]), min=0, max=1, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("up", "Orient Up Vector", 3, default_value=([0, 1, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Vector, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("bank", "Auto-Bank factor", 1, default_value=([0]), min=-1, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4_1", "Render", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("shop_materialpath", "Material", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setTags({"opfilter": "!!CUSTOM/MATERIAL!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("shop_materialopts", "Options", menu_items=([]), menu_labels=([]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Mini, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("tdisplay", "Display", default_value=False)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("display", "Display", 1, default_value=([1]), min=0, max=1, min_is_strict=True, max_is_strict=True, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("viewportlod", "Display As", menu_items=(["full","points","box","centroid","hidden","subd"]), menu_labels=(["Full Geometry","Point Cloud","Bounding Box","Centroid","Hidden","Subdivision Surface / Curves"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setHelp("Choose how the object's geometry should be rendered in the viewport")
hou_parm_template2.setTags({"spare_category": "Render"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_rendervisibility", "Render Visibility", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["*","primary","primary|shadow","-primary","-diffuse","-diffuse&-reflect&-refract",""]), menu_labels=(["Visible to all","Visible only to primary rays","Visible only to primary and shadow rays","Invisible to primary rays (Phantom)","Invisible to diffuse rays","Invisible to secondary rays","Invisible (Unrenderable)"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "rendervisibility", "spare_category": "Render"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vm_rendersubd", "Render Polygons As Subdivision (Mantra)", default_value=False)
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "rendersubd", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_subdstyle", "Subdivision Style", 1, default_value=(["mantra_catclark"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["mantra_catclark","osd_catclark"]), menu_labels=(["Mantra Catmull-Clark","OpenSubdiv Catmull-Clark"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "subdstyle", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_subdgroup", "Subdivision Group", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "subdgroup", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("vm_osd_quality", "Open Subdiv Quality", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_quality", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("vm_osd_vtxinterp", "OSD Vtx Interp", 1, default_value=([2]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["No vertex interpolation","Edges only","Edges and Corners"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_vtxinterp", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("vm_osd_fvarinterp", "OSD FVar Interp", 1, default_value=([4]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2","3","4","5"]), menu_labels=(["Smooth everywhere","Sharpen corners only","Sharpen edges and corners","Sharpen edges and propagated corners","Sharpen all boundaries","Bilinear interpolation"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_fvarinterp", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0", "Shading", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("categories", "Categories", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("A list of tags which can be used to select the object")
hou_parm_template3.setTags({"spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("reflectmask", "Reflection Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Objects that will be reflected on this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/GEOMETRY!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("refractmask", "Refraction Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Objects that will be refracted on this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/GEOMETRY!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("lightmask", "Light Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Lights that illuminate this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/LIGHT!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("lightcategories", "Light Selection", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_lpetag", "LPE Tag", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "lpetag", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_volumefilter", "Volume Filter", 1, default_value=(["box"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["box","gaussian","bartlett","catrom","hanning","blackman","sinc"]), menu_labels=(["Box Filter","Gaussian","Bartlett (triangle)","Catmull-Rom","Hanning","Blackman","Sinc (sharpening)"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "filter", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_volumefilterwidth", "Volume Filter Width", 1, default_value=([1]), min=0.001, max=5, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "filterwidth", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_matte", "Matte shading", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "matte", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rayshade", "Raytrace Shading", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rayshade", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_1", "Sampling", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("geo_velocityblur", "Geometry Velocity Blur", menu_items=(["off","on","accelblur"]), menu_labels=(["No Velocity Blur","Velocity Blur","Acceleration Blur"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ allowmotionblur == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("geo_accelattribute", "Acceleration Attribute", 1, default_value=(["accel"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ geo_velocityblur != accelblur }")
hou_parm_template3.setTags({"spare_category": "Sampling"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_2", "Dicing", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_shadingquality", "Shading Quality", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "shadingquality", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_flatness", "Dicing Flatness", 1, default_value=([0.05]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "flatness", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_raypredice", "Ray Predicing", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["Disable Predicing","Full Predicing","Precompute Bounds"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "raypredice", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_curvesurface", "Shade Curves As Surfaces", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "curvesurface", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_3", "Geometry", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rmbackface", "Backface Removal", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rmbackface", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("shop_geometrypath", "Procedural Shader", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"opfilter": "!!SHOP/GEOMETRY!!", "oprelative": ".", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_forcegeometry", "Force Procedural Geometry Output", default_value=True)
hou_parm_template3.setTags({"spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rendersubdcurves", "Render Polygon Curves As Subdivision (Mantra)", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rendersubdcurves", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_renderpoints", "Render As Points (Mantra)", 1, default_value=([2]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["No Point Rendering","Render Only Points","Render Unconnected Points"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "renderpoints", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_renderpointsas", "Render Points As (Mantra)", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1"]), menu_labels=(["Spheres","Circles"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "renderpointsas", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_usenforpoints", "Use N For Point Rendering", default_value=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "usenforpoints", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_pointscale", "Point Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "pointscale", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_pscalediameter", "Treat Point Scale as Diameter Instead of Radius", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "pscalediameter", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_metavolume", "Metaballs as Volume", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "metavolume", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_coving", "Coving", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["Disable Coving","Coving for displacement/sub-d","Coving for all primitives"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "coving", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_materialoverride", "Material Override", 1, default_value=(["compact"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["none","full","compact"]), menu_labels=(["Disabled","Evaluate for Each Primitve/Point","Evaluate Once"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_overridedetail", "Ignore Geometry Attribute Shaders", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "overridedetail", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_procuseroottransform", "Proc Use Root Transform", default_value=True)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "procuseroottransform", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4_2", "Misc", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("use_dcolor", "Set Wireframe Color", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("dcolor", "Wireframe Color", 3, default_value=([1, 1, 1]), min=0, max=1, min_is_strict=True, max_is_strict=True, look=hou.parmLook.ColorSquare, naming_scheme=hou.parmNamingScheme.RGBA)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("picking", "Viewport Selecting Enabled", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pickscript", "Select Script", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.FileReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"filechooser_mode": "read"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("caching", "Cache Object Transform", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vport_shadeopen", "Shade Open Curves In Viewport", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vport_displayassubdiv", "Display as Subdivision in Viewport", default_value=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("vport_onionskin", "Onion Skinning", menu_items=(["off","xform","on"]), menu_labels=(["Off","Transform only","Full Deformation"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
hou_node.setParmTemplateGroup(hou_parm_template_group)
# Code for /obj/axiom/axiom/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/axiom/r parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom")
hou_parm_tuple = hou_node.parmTuple("r")
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/axiom/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.setAutoscope((True, True, True))


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node

# Code for /obj/axiom/axiom/axiom_solver
hou_node = hou_parent.createNode("axiom_solver", "axiom_solver", run_init_scripts=False, load_contents=True)
hou_node.move(hou.Vector2(5.83925, -5.30613))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom/axiom/axiom_solver/resetSim parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("resetSim")
hou_parm.deleteAllKeyframes()
hou_parm.set("0")


# Code for /obj/axiom/axiom/axiom_solver/folder01 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("folder01")
hou_parm.deleteAllKeyframes()
hou_parm.set(2)


# Code for /obj/axiom/axiom/axiom_solver/startFrame parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("startFrame")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/divisionSize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("divisionSize")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.050000000000000003)


# Code for /obj/axiom/axiom/axiom_solver/description parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("description")
hou_parm.deleteAllKeyframes()
hou_parm.set("GPU:    GeForce RTX 2080")


# Code for /obj/axiom/axiom/axiom_solver/openVDBMajorVersion parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("openVDBMajorVersion")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/axiom_solver/openVDBMinorVersion parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("openVDBMinorVersion")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/axiom_solver/dissipation parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("dissipation")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.10000000000000001)


# Code for /obj/axiom/axiom/axiom_solver/enableWind parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("enableWind")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/wind parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("wind")
hou_parm.deleteAllKeyframes()
hou_parm.set(8)


# Code for /obj/axiom/axiom/axiom_solver/enableDisturbance1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("enableDisturbance1")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/disturbance1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("disturbance1")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.5)


# Code for /obj/axiom/axiom/axiom_solver/dissipationSettings1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("dissipationSettings1")
hou_parm.deleteAllKeyframes()
hou_parm.set(4)


# Code for /obj/axiom/axiom/axiom_solver/enableWindTurbulence parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("enableWindTurbulence")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/windTurbulence parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("windTurbulence")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.5)


# Code for /obj/axiom/axiom/axiom_solver/windTurbulenceSwirlSize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("windTurbulenceSwirlSize")
hou_parm.deleteAllKeyframes()
hou_parm.set(2)


# Code for /obj/axiom/axiom/axiom_solver/windControlField parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("windControlField")
hou_parm.deleteAllKeyframes()
hou_parm.set("6")


# Code for /obj/axiom/axiom/axiom_solver/windInputRange parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm_tuple = hou_node.parmTuple("windInputRange")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 16))


# Code for /obj/axiom/axiom/axiom_solver/disturbance1BlockSize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("disturbance1BlockSize")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/axiom_solver/disturbance2BlockSize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("disturbance2BlockSize")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/axiom_solver/turbulence2SwirlSize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("turbulence2SwirlSize")
hou_parm.deleteAllKeyframes()
hou_parm.set(2)

# Code for /obj/axiom/axiom/axiom_solver/dissipationRamp1value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("dissipationRamp1value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/dissipationRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("dissipationRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/dissipationRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("dissipationRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.25)


# Code for /obj/axiom/axiom/axiom_solver/coolingRateRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("coolingRateRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/coolingRateRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("coolingRateRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/windRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("windRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/windRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("windRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/disturbance1Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("disturbance1Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/disturbance1Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("disturbance1Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/disturbance2Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("disturbance2Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/disturbance2Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("disturbance2Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/turbulence1Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("turbulence1Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/turbulence1Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("turbulence1Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/turbulence2Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("turbulence2Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/turbulence2Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("turbulence2Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/confinementRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("confinementRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/confinementRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("confinementRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/ignitionTemperatureRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("ignitionTemperatureRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/ignitionTemperatureRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("ignitionTemperatureRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/colorRamp1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm_tuple = hou_node.parmTuple("colorRamp1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.29588711261749268, 0.36125144362449646, 0.5))


# Code for /obj/axiom/axiom/axiom_solver/colorRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("colorRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.24265842139720917)


# Code for /obj/axiom/axiom/axiom_solver/colorRamp2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm_tuple = hou_node.parmTuple("colorRamp2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.047032315284013748, 0.10041522234678268, 0.44179984927177429))


# Code for /obj/axiom/axiom/axiom_solver/colorRamp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("colorRamp3pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/colorRamp3c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm_tuple = hou_node.parmTuple("colorRamp3c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 0.5, 0.2703932523727417))


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom/axiom/axiom_sourceShape
hou_node = hou_parent.createNode("axiom_sourceShape::02.001", "axiom_sourceShape", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.83925, -3.92056))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom/axiom/remapDensity
hou_node = hou_parent.createNode("volumewrangle", "remapDensity", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.83925, -6.81138))
hou_node.bypass(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(True)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom/axiom/remapDensity/snippet parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/remapDensity")
hou_parm = hou_node.parm("snippet")
hou_parm.deleteAllKeyframes()
hou_parm.set("@density = fit(@density, 0, 0.5, 0, 1);")


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code to establish connections for /obj/axiom/axiom/axiom_solver
hou_node = hou_parent.node("axiom_solver")
if hou_parent.node("axiom_sourceShape") is not None:
    hou_node.setInput(1, hou_parent.node("axiom_sourceShape"), 0)
# Code to establish connections for /obj/axiom/axiom/remapDensity
hou_node = hou_parent.node("remapDensity")
if hou_parent.node("axiom_solver") is not None:
    hou_node.setInput(0, hou_parent.node("axiom_solver"), 0)

# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom/key
hou_node = hou_parent.createNode("hlight::2.0", "key", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(0.82891, 3.61212))
hou_node.setSelectableInViewport(True)
hou_node.showOrigin(False)
hou_node.useXray(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

# Code for /obj/axiom/key/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((-8, 0, 0))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/key/r parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm_tuple = hou_node.parmTuple("r")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((-25.011623657810606, -54.49866088801371, 4.9292076022005006e-14))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/key/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/key/scale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("scale")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/key/dimmer parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("dimmer")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(True)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/key/caching parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("caching")
hou_parm.deleteAllKeyframes()
hou_parm.set(0)


# Code for /obj/axiom/key/light_type parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("light_type")
hou_parm.deleteAllKeyframes()
hou_parm.set("distant")


# Code for /obj/axiom/key/l_dimmer parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("l_dimmer")
hou_parm.setAutoscope(True)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/key/focal parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("focal")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/key/aperture parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("aperture")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/key/projection2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("projection2")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/key/attenramp1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm_tuple = hou_node.parmTuple("attenramp1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))


# Code for /obj/axiom/key/attenramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("attenramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.89999997600000003)


# Code for /obj/axiom/key/attenramp2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm_tuple = hou_node.parmTuple("attenramp2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))


# Code for /obj/axiom/key/attenramp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("attenramp3pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___toolid___", "object_pointlight")
hou_node.setUserData("___Version___", "1")
hou_node.setUserData("___toolcount___", "1")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("1")
# Code for /obj/axiom/fill
hou_node = hou_parent.createNode("hlight::2.0", "fill", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(0.82891, 2.71996))
hou_node.setSelectableInViewport(True)
hou_node.showOrigin(False)
hou_node.useXray(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

# Code for /obj/axiom/fill/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((8, 0, 0))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/fill/r parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm_tuple = hou_node.parmTuple("r")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((33.715984016095391, 56.817922108058525, 1.2245709861449935e-06))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/fill/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/fill/scale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("scale")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/fill/dimmer parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("dimmer")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.32000000000000001)
hou_parm.setAutoscope(True)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/fill/caching parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("caching")
hou_parm.deleteAllKeyframes()
hou_parm.set(0)


# Code for /obj/axiom/fill/light_type parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("light_type")
hou_parm.deleteAllKeyframes()
hou_parm.set("distant")


# Code for /obj/axiom/fill/light_color parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm_tuple = hou_node.parmTuple("light_color")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.53031551837921143, 0.87517815828323364, 1))


# Code for /obj/axiom/fill/light_intensity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("light_intensity")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.32000000000000001)


# Code for /obj/axiom/fill/l_dimmer parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("l_dimmer")
hou_parm.setAutoscope(True)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/fill/focal parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("focal")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/fill/aperture parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("aperture")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/fill/projection2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("projection2")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/fill/attenramp1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm_tuple = hou_node.parmTuple("attenramp1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))


# Code for /obj/axiom/fill/attenramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("attenramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.89999997600000003)


# Code for /obj/axiom/fill/attenramp2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm_tuple = hou_node.parmTuple("attenramp2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))


# Code for /obj/axiom/fill/attenramp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("attenramp3pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___toolid___", "object_pointlight")
hou_node.setUserData("___Version___", "1")
hou_node.setUserData("___toolcount___", "1")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("1")]]></script>
  </tool>

  <tool name="axiom_explosion_v02_b001" label="Explosion" icon="opdef:/Sop/axiom_solver::02.001?axiom_explosion_icon_sRGB.png">
    <script scriptType="python"><![CDATA[# Initialize parent node variable.
if locals().get("hou_parent") is None:
    hou_parent = hou.node("/obj")

# Code for /obj/axiom
hou_node = hou_parent.createNode("subnet", "axiom", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(-0.924298, -0.0682981))
hou_node.setSelectableInViewport(True)
hou_node.showOrigin(False)
hou_node.useXray(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

# Code for /obj/axiom/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/r parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom")
hou_parm_tuple = hou_node.parmTuple("r")
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.setAutoscope((True, True, True))


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node

# Code for /obj/axiom/axiom
hou_node = hou_parent.createNode("geo", "axiom", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(3.1287, 3.61212))
hou_node.setSelectableInViewport(True)
hou_node.showOrigin(False)
hou_node.useXray(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

hou_parm_template_group = hou.ParmTemplateGroup()
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4", "Transform", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("xOrd", "Transform Order", menu_items=(["srt","str","rst","rts","tsr","trs"]), menu_labels=(["Scale Rot Trans","Scale Trans Rot","Rot Scale Trans","Rot Trans Scale","Trans Scale Rot","Trans Rot Scale"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("rOrd", "Rotate Order", menu_items=(["xyz","xzy","yxz","yzx","zxy","zyx"]), menu_labels=(["Rx Ry Rz","Rx Rz Ry","Ry Rx Rz","Ry Rz Rx","Rz Rx Ry","Rz Ry Rx"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hideLabel(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("t", "Translate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 0)", "script_action_help": "Select an object to match the translation with.", "script_action_icon": "BUTTONS_match_transform"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("r", "Rotate", 3, default_value=([0, 0, 0]), min=0, max=360, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 1)", "script_action_help": "Select an object to match the rotation with.", "script_action_icon": "BUTTONS_match_rotation"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("s", "Scale", 3, default_value=([1, 1, 1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 2)", "script_action_help": "Select an object to match the scale with.", "script_action_icon": "BUTTONS_match_scale"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("p", "Pivot Translate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 3)", "script_action_help": "Select an object to match the pivot with.", "script_action_icon": "BUTTONS_match_pivot"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("pr", "Pivot Rotate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 4)", "script_action_help": "Select an object to match the pivot rotation with.", "script_action_icon": "BUTTONS_match_pivot_rotation"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("scale", "Uniform Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("pre_xform", "Modify Pre-Transform", menu_items=(["clean","cleantrans","cleanrot","cleanscales","extract","reset"]), menu_labels=(["Clean Transform","Clean Translates","Clean Rotates","Clean Scales","Extract Pre-transform","Reset Pre-transform"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("keeppos", "Keep Position When Parenting", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("childcomp", "Child Compensation", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("constraints_on", "Enable Constraints", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("constraints_path", "Constraints", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constraints_on == 0 }")
hou_parm_template2.setTags({"opfilter": "!!CHOP", "oprelative": ".", "script_action": "import objecttoolutils\nobjecttoolutils.constraintsMenu(kwargs)", "script_action_help": "", "script_action_icon": "BUTTONS_add_constraints"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookatpath", "Look At", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!OBJ!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookupobjpath", "Look Up Object", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!OBJ!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookup", "Look At Up Vector", 1, default_value=(["on"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["off","on","quat","pos","obj"]), menu_labels=(["Don't Use Up Vector","Use Up Vector","Use Quaternions","Use Global Position","Use Up Object"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pathobjpath", "Path Object", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!SOP!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("roll", "Roll", 1, default_value=([0]), min=-360, max=360, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Angle, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("pos", "Position", 1, default_value=([0]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("uparmtype", "Parameterization", menu_items=(["uniform","arc"]), menu_labels=(["Uniform","Arc Length"]), default_value=1, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("pathorient", "Orient Along Path", 1, default_value=([1]), min=0, max=1, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("up", "Orient Up Vector", 3, default_value=([0, 1, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Vector, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("bank", "Auto-Bank factor", 1, default_value=([0]), min=-1, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4_1", "Render", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("shop_materialpath", "Material", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setTags({"opfilter": "!!CUSTOM/MATERIAL!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("shop_materialopts", "Options", menu_items=([]), menu_labels=([]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Mini, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("tdisplay", "Display", default_value=False)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("display", "Display", 1, default_value=([1]), min=0, max=1, min_is_strict=True, max_is_strict=True, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("viewportlod", "Display As", menu_items=(["full","points","box","centroid","hidden","subd"]), menu_labels=(["Full Geometry","Point Cloud","Bounding Box","Centroid","Hidden","Subdivision Surface / Curves"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setHelp("Choose how the object's geometry should be rendered in the viewport")
hou_parm_template2.setTags({"spare_category": "Render"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_rendervisibility", "Render Visibility", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["*","primary","primary|shadow","-primary","-diffuse","-diffuse&-reflect&-refract",""]), menu_labels=(["Visible to all","Visible only to primary rays","Visible only to primary and shadow rays","Invisible to primary rays (Phantom)","Invisible to diffuse rays","Invisible to secondary rays","Invisible (Unrenderable)"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "rendervisibility", "spare_category": "Render"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vm_rendersubd", "Render Polygons As Subdivision (Mantra)", default_value=False)
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "rendersubd", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_subdstyle", "Subdivision Style", 1, default_value=(["mantra_catclark"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["mantra_catclark","osd_catclark"]), menu_labels=(["Mantra Catmull-Clark","OpenSubdiv Catmull-Clark"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "subdstyle", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_subdgroup", "Subdivision Group", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "subdgroup", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("vm_osd_quality", "Open Subdiv Quality", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_quality", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("vm_osd_vtxinterp", "OSD Vtx Interp", 1, default_value=([2]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["No vertex interpolation","Edges only","Edges and Corners"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_vtxinterp", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("vm_osd_fvarinterp", "OSD FVar Interp", 1, default_value=([4]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2","3","4","5"]), menu_labels=(["Smooth everywhere","Sharpen corners only","Sharpen edges and corners","Sharpen edges and propagated corners","Sharpen all boundaries","Bilinear interpolation"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_fvarinterp", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0", "Shading", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("categories", "Categories", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("A list of tags which can be used to select the object")
hou_parm_template3.setTags({"spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("reflectmask", "Reflection Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Objects that will be reflected on this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/GEOMETRY!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("refractmask", "Refraction Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Objects that will be refracted on this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/GEOMETRY!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("lightmask", "Light Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Lights that illuminate this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/LIGHT!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("lightcategories", "Light Selection", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_lpetag", "LPE Tag", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "lpetag", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_volumefilter", "Volume Filter", 1, default_value=(["box"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["box","gaussian","bartlett","catrom","hanning","blackman","sinc"]), menu_labels=(["Box Filter","Gaussian","Bartlett (triangle)","Catmull-Rom","Hanning","Blackman","Sinc (sharpening)"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "filter", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_volumefilterwidth", "Volume Filter Width", 1, default_value=([1]), min=0.001, max=5, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "filterwidth", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_matte", "Matte shading", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "matte", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rayshade", "Raytrace Shading", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rayshade", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_1", "Sampling", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("geo_velocityblur", "Geometry Velocity Blur", menu_items=(["off","on","accelblur"]), menu_labels=(["No Velocity Blur","Velocity Blur","Acceleration Blur"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ allowmotionblur == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("geo_accelattribute", "Acceleration Attribute", 1, default_value=(["accel"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ geo_velocityblur != accelblur }")
hou_parm_template3.setTags({"spare_category": "Sampling"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_2", "Dicing", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_shadingquality", "Shading Quality", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "shadingquality", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_flatness", "Dicing Flatness", 1, default_value=([0.05]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "flatness", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_raypredice", "Ray Predicing", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["Disable Predicing","Full Predicing","Precompute Bounds"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "raypredice", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_curvesurface", "Shade Curves As Surfaces", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "curvesurface", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_3", "Geometry", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rmbackface", "Backface Removal", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rmbackface", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("shop_geometrypath", "Procedural Shader", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"opfilter": "!!SHOP/GEOMETRY!!", "oprelative": ".", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_forcegeometry", "Force Procedural Geometry Output", default_value=True)
hou_parm_template3.setTags({"spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rendersubdcurves", "Render Polygon Curves As Subdivision (Mantra)", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rendersubdcurves", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_renderpoints", "Render As Points (Mantra)", 1, default_value=([2]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["No Point Rendering","Render Only Points","Render Unconnected Points"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "renderpoints", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_renderpointsas", "Render Points As (Mantra)", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1"]), menu_labels=(["Spheres","Circles"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "renderpointsas", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_usenforpoints", "Use N For Point Rendering", default_value=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "usenforpoints", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_pointscale", "Point Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "pointscale", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_pscalediameter", "Treat Point Scale as Diameter Instead of Radius", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "pscalediameter", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_metavolume", "Metaballs as Volume", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "metavolume", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_coving", "Coving", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["Disable Coving","Coving for displacement/sub-d","Coving for all primitives"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "coving", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_materialoverride", "Material Override", 1, default_value=(["compact"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["none","full","compact"]), menu_labels=(["Disabled","Evaluate for Each Primitve/Point","Evaluate Once"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_overridedetail", "Ignore Geometry Attribute Shaders", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "overridedetail", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_procuseroottransform", "Proc Use Root Transform", default_value=True)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "procuseroottransform", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4_2", "Misc", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("use_dcolor", "Set Wireframe Color", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("dcolor", "Wireframe Color", 3, default_value=([1, 1, 1]), min=0, max=1, min_is_strict=True, max_is_strict=True, look=hou.parmLook.ColorSquare, naming_scheme=hou.parmNamingScheme.RGBA)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("picking", "Viewport Selecting Enabled", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pickscript", "Select Script", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.FileReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"filechooser_mode": "read"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("caching", "Cache Object Transform", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vport_shadeopen", "Shade Open Curves In Viewport", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vport_displayassubdiv", "Display as Subdivision in Viewport", default_value=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("vport_onionskin", "Onion Skinning", menu_items=(["off","xform","on"]), menu_labels=(["Off","Transform only","Full Deformation"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
hou_node.setParmTemplateGroup(hou_parm_template_group)
# Code for /obj/axiom/axiom/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/axiom/r parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom")
hou_parm_tuple = hou_node.parmTuple("r")
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/axiom/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.setAutoscope((True, True, True))


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node

# Code for /obj/axiom/axiom/axiom_solver
hou_node = hou_parent.createNode("axiom_solver", "axiom_solver", run_init_scripts=False, load_contents=True)
hou_node.move(hou.Vector2(5.68043, -12.6242))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom/axiom/axiom_solver/folder01 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("folder01")
hou_parm.deleteAllKeyframes()
hou_parm.set(2)


# Code for /obj/axiom/axiom/axiom_solver/startFrame parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("startFrame")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)

# Code for /obj/axiom/axiom/axiom_solver/openVDBMajorVersion parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("openVDBMajorVersion")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMajorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/axiom_solver/openVDBMinorVersion parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("openVDBMinorVersion")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = hou.pwd().type().name()\n\nversion = node.split('::')[1]\n\ncommand = \"AXIOM_getOpenVDBMinorVersion\"\ncommand += \"_\"\ncommand += version.replace('.', \"_\")\n\nval = hou.hscript(command)[0]\n\nreturn int(val)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/axiom_solver/sourceVelocity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("sourceVelocity")
hou_parm.deleteAllKeyframes()
hou_parm.set(8)


# Code for /obj/axiom/axiom/axiom_solver/buoyancy parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("buoyancy")
hou_parm.deleteAllKeyframes()
hou_parm.set(3)


# Code for /obj/axiom/axiom/axiom_solver/enableDisturbance1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("enableDisturbance1")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/disturbance1BlockSize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("disturbance1BlockSize")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/axiom_solver/disturbance2BlockSize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("disturbance2BlockSize")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"divisionSize\")*4", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/axiom_solver/enableCombustion parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("enableCombustion")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/fuelBurn parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("fuelBurn")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.10000000000000001)


# Code for /obj/axiom/axiom/axiom_solver/solverTimeStepFuelBurn parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("solverTimeStepFuelBurn")
hou_parm.deleteAllKeyframes()
hou_parm.set("1")


# Code for /obj/axiom/axiom/axiom_solver/pressureEmit parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("pressureEmit")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.20000000000000001)


# Code for /obj/axiom/axiom/axiom_solver/folder16_11 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("folder16_11")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/voxelLimitBehavior parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("voxelLimitBehavior")
hou_parm.deleteAllKeyframes()
hou_parm.set("0")

# Code for /obj/axiom/axiom/axiom_solver/dissipationRamp1value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("dissipationRamp1value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/dissipationRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("dissipationRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/dissipationRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("dissipationRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.25)


# Code for /obj/axiom/axiom/axiom_solver/coolingRateRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("coolingRateRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/coolingRateRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("coolingRateRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/windRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("windRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/windRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("windRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/disturbance1Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("disturbance1Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/disturbance1Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("disturbance1Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/disturbance2Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("disturbance2Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/disturbance2Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("disturbance2Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/turbulence1Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("turbulence1Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/turbulence1Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("turbulence1Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/turbulence2Ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("turbulence2Ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/turbulence2Ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("turbulence2Ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/confinementRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("confinementRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/confinementRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("confinementRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/ignitionTemperatureRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("ignitionTemperatureRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/ignitionTemperatureRamp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("ignitionTemperatureRamp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/colorRamp1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm_tuple = hou_node.parmTuple("colorRamp1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.29588711261749268, 0.36125144362449646, 0.5))


# Code for /obj/axiom/axiom/axiom_solver/colorRamp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("colorRamp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.24265842139720917)


# Code for /obj/axiom/axiom/axiom_solver/colorRamp2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm_tuple = hou_node.parmTuple("colorRamp2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.047032315284013748, 0.10041522234678268, 0.44179984927177429))


# Code for /obj/axiom/axiom/axiom_solver/colorRamp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm = hou_node.parm("colorRamp3pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/axiom_solver/colorRamp3c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/axiom_solver")
hou_parm_tuple = hou_node.parmTuple("colorRamp3c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0, 0.5, 0.2703932523727417))


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom/axiom/explosion_center
hou_node = hou_parent.createNode("add", "explosion_center", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.68043, -2.81303))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom/axiom/explosion_center/usept0 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/explosion_center")
hou_parm = hou_node.parm("usept0")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom/axiom/init_startframe
hou_node = hou_parent.createNode("attribadjustfloat", "init_startframe", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.68043, -3.81303))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom/axiom/init_startframe/attrib parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/init_startframe")
hou_parm = hou_node.parm("attrib")
hou_parm.deleteAllKeyframes()
hou_parm.set("startframe")


# Code for /obj/axiom/axiom/init_startframe/operation parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/init_startframe")
hou_parm = hou_node.parm("operation")
hou_parm.deleteAllKeyframes()
hou_parm.set("set")


# Code for /obj/axiom/axiom/init_startframe/singlevalue parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/init_startframe")
hou_parm = hou_node.parm("singlevalue")
hou_parm.deleteAllKeyframes()
hou_parm.set(4)


# Code for /obj/axiom/axiom/init_startframe/outlierseed parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/init_startframe")
hou_parm = hou_node.parm("outlierseed")
hou_parm.deleteAllKeyframes()
hou_parm.set(93)


# Code for /obj/axiom/axiom/init_startframe/randomseed parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/init_startframe")
hou_parm = hou_node.parm("randomseed")
hou_parm.deleteAllKeyframes()
hou_parm.set(21)


# Code for /obj/axiom/axiom/init_startframe/remapramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/init_startframe")
hou_parm = hou_node.parm("remapramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/init_startframe/remapramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/init_startframe")
hou_parm = hou_node.parm("remapramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom/axiom/pyroBurstSource
hou_node = hou_parent.createNode("pyroburstsource", "pyroBurstSource", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(3.68043, -5.81303))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom/axiom/pyroBurstSource/spreadangle parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("spreadangle")
hou_parm.deleteAllKeyframes()
hou_parm.set(180)


# Code for /obj/axiom/axiom/pyroBurstSource/trailinglen parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("trailinglen")
hou_parm.deleteAllKeyframes()
hou_parm.set(2)


# Code for /obj/axiom/axiom/pyroBurstSource/startframe_mode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("startframe_mode")
hou_parm.deleteAllKeyframes()
hou_parm.set("attrib")


# Code for /obj/axiom/axiom/pyroBurstSource/expdur parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("expdur")
hou_parm.deleteAllKeyframes()
hou_parm.set(10)


# Code for /obj/axiom/axiom/pyroBurstSource/outexpscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("outexpscale")
hou_parm.deleteAllKeyframes()
hou_parm.set(6)


# Code for /obj/axiom/axiom/pyroBurstSource/enablesourcedurationscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("enablesourcedurationscale")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/enablesourcetrailingscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("enablesourcetrailingscale")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/number_of_sources parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("number_of_sources")
hou_parm.deleteAllKeyframes()
hou_parm.set(3)


# Code for /obj/axiom/axiom/pyroBurstSource/vaddnoise parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("vaddnoise")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/expramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("expramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.25)


# Code for /obj/axiom/axiom/pyroBurstSource/expramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("expramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/expramp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("expramp3pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/expramp3value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("expramp3value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/sourcedurationramp1pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("sourcedurationramp1pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.65000000000000002)


# Code for /obj/axiom/axiom/pyroBurstSource/sourcedurationramp1value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("sourcedurationramp1value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/sourcedurationramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("sourcedurationramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.75)


# Code for /obj/axiom/axiom/pyroBurstSource/sourcedurationramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("sourcedurationramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.84999999999999998)


# Code for /obj/axiom/axiom/pyroBurstSource/sourcedurationramp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("sourcedurationramp3pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.84999999999999998)


# Code for /obj/axiom/axiom/pyroBurstSource/sourcetrailingramp1value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("sourcetrailingramp1value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/sourcetrailingramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("sourcetrailingramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.75)


# Code for /obj/axiom/axiom/pyroBurstSource/sourcetrailingramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("sourcetrailingramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/sourcetrailingramp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("sourcetrailingramp3pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/source_create1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_create1")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/source_noiseoffset1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_noiseoffset1")

hou_node.allowEditingOfContents()
hou_node.cook()
hou_node.matchCurrentDefinition()
hou_node.cook()

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("1", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("1", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("1", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("1", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/pyroBurstSource/source_doseedoffset1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_doseedoffset1")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/source_seedoffset1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_seedoffset1")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("1", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("1", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("1", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("1", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/pyroBurstSource/source_colornoiseramp1_1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm_tuple = hou_node.parmTuple("source_colornoiseramp1_1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.29999999999999999, 0.1875, 0.074999999999999997))


# Code for /obj/axiom/axiom/pyroBurstSource/source_colornoiseramp1_2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_colornoiseramp1_2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/source_colornoiseramp1_2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm_tuple = hou_node.parmTuple("source_colornoiseramp1_2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.10000000000000001, 0.050000000000000003, 0.01))


# Code for /obj/axiom/axiom/pyroBurstSource/source_create2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_create2")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/source_attrib2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_attrib2")
hou_parm.deleteAllKeyframes()
hou_parm.set("temperature")


# Code for /obj/axiom/axiom/pyroBurstSource/source_noiseoffset2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_noiseoffset2")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/pyroBurstSource/source_doseedoffset2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_doseedoffset2")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/source_seedoffset2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_seedoffset2")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("2", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/pyroBurstSource/source_colornoiseramp2_1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm_tuple = hou_node.parmTuple("source_colornoiseramp2_1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.29999999999999999, 0.1875, 0.074999999999999997))


# Code for /obj/axiom/axiom/pyroBurstSource/source_colornoiseramp2_2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_colornoiseramp2_2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/source_colornoiseramp2_2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm_tuple = hou_node.parmTuple("source_colornoiseramp2_2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.10000000000000001, 0.050000000000000003, 0.01))


# Code for /obj/axiom/axiom/pyroBurstSource/source_create3 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_create3")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/source_attrib3 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_attrib3")
hou_parm.deleteAllKeyframes()
hou_parm.set("burn")


# Code for /obj/axiom/axiom/pyroBurstSource/source_noiseoffset3 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_noiseoffset3")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("3", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("3", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("3", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("3", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/pyroBurstSource/source_doseedoffset3 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_doseedoffset3")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/source_seedoffset3 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_seedoffset3")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("3", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("3", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("3", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("3", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/pyroBurstSource/source_colornoiseramp3_1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm_tuple = hou_node.parmTuple("source_colornoiseramp3_1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.29999999999999999, 0.1875, 0.074999999999999997))


# Code for /obj/axiom/axiom/pyroBurstSource/source_colornoiseramp3_2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm = hou_node.parm("source_colornoiseramp3_2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroBurstSource/source_colornoiseramp3_2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroBurstSource")
hou_parm_tuple = hou_node.parmTuple("source_colornoiseramp3_2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.10000000000000001, 0.050000000000000003, 0.01))


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
hou_node.setUserData("wirestyle", "rounded")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom/axiom/volumeRasterizeAttributes
hou_node = hou_parent.createNode("volumerasterizeattributes", "volumeRasterizeAttributes", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(3.68043, -6.81303))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

hou_parm_template_group = hou.ParmTemplateGroup()
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("folder2", "General", folder_type=hou.folderType.Simple, default_value=0, ends_tab_group=False)
hou_parm_template.setTags({"group_type": "simple"})
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("points", "Group", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="opmenu -l rasterize points", item_generator_script_language=hou.scriptLanguage.Hscript, menu_type=hou.menuType.StringToggle)
hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_action": "import soputils\nkwargs['geometrytype'] = (hou.geometryType.Points,)\nkwargs['inputindex'] = 0\nsoputils.selectGroupParm(kwargs)", "script_action_help": "Select geometry from an available viewport.\nShift-click to turn on Select Groups.", "script_action_icon": "BUTTONS_reselect", "sop_input": "1"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("attributes", "Attributes", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="r = []\nnode = hou.pwd()\ninputs = node.inputs()\nif inputs and inputs[0]:\n    geo = inputs[0].geometry()\n    if geo:\n        attrs = geo.pointAttribs()\n        for a in attrs:            \n            if a.dataType() == hou.attribData.Float and not a.isArrayType() and a.size() in [1, 3]:\n                r.extend([a.name(), a.name()])\nr.sort()\nreturn r", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringToggle)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("filterbysrcattrib", "Source Attribute", default_value=False)
hou_parm_template2.hideLabel(True)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python)
hou_parm_template2.setTags({"script_callback_language": "python"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("srcattrib", "Source Attribute", 1, default_value=(["source_name"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="r = []\nnode = hou.pwd()\ninputs = node.inputs()\nif inputs and inputs[0]:\n    geo = inputs[0].geometry()\n    if geo:\n        attrs = geo.pointAttribs()\n        for a in attrs:            \n            if a.dataType() == hou.attribData.String and not a.isArrayType() and a.size() == 1:\n                r.extend([a.name(), a.name()])\nr.sort()\nreturn r", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ filterbysrcattrib == 0 }")
hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python)
hou_parm_template2.setTags({"script_callback_language": "python"})
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("folder3", "Rasterization", folder_type=hou.folderType.Simple, default_value=0, ends_tab_group=False)
hou_parm_template.setTags({"group_type": "simple"})
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("filter", "Filter", 1, default_value=(["gauss"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="opmenu -l rasterize0 filter", item_generator_script_language=hou.scriptLanguage.Hscript, menu_type=hou.menuType.Normal)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("voxelsize", "Voxel Size", 1, default_value=([0.1]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("particlescale", "Particle Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("minfilter", "Minimum Filter Size", 1, default_value=([0.75]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.SeparatorParmTemplate("sepparm")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("velocityblur", "Velocity Blur", default_value=False, default_expression='off', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("shutter", "Shutter", 1, default_value=([0.5]), min=0, max=1, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ velocityblur == 0 }")
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("shutteroffset", "Shutter Offset", 1, default_value=([1]), min=-1, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ velocityblur == 0 }")
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("blursamples", "Blur Samples", 1, default_value=([4]), min=1, max=10, min_is_strict=True, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ velocityblur == 0 }")
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.SeparatorParmTemplate("sepparm2")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("densityattrib", "Coverage Attribute", 1, default_value=(["density"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="r = []\nnode = hou.pwd()\ninputs = node.inputs()\nif inputs and inputs[0]:\n    geo = inputs[0].geometry()\n    if geo:\n        attrs = geo.pointAttribs()\n        for a in attrs:            \n            if a.dataType() == hou.attribData.Float and not a.isArrayType() and a.size() == 1:\n                r.extend([a.name(), a.name()])\nr.sort()\nreturn r", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("densityscale", "Coverage Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("normalize", "Normalize by Clamped Coverage", default_value=False, default_expression='off', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("attribrules", "Attribute Rules", folder_type=hou.folderType.MultiparmBlock, default_value=0, ends_tab_group=False)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("attribute#", "Attributes", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="r = []\nnode = hou.pwd()\ninputs = node.inputs()\nif inputs and inputs[0]:\n    geo = inputs[0].geometry()\n    if geo:\n        attrs = geo.pointAttribs()\n        for a in attrs:            \n            if a.dataType() == hou.attribData.Float and not a.isArrayType() and a.size() in [1, 3]:\n                r.extend([a.name(), a.name()])\nr.sort()\nreturn r", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringToggle)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("rule#", "Method", menu_items=(["wavg","threshold","accumulated","stochastic"]), menu_labels=(["Weighted Average","Covered Average","Accumulated","Stochastic"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("pyro_burst_source", "Pyro Burst Source Helper", folder_type=hou.folderType.Collapsible, default_value=0, ends_tab_group=False)
hou_parm_template.setTags({"group_type": "collapsible"})
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pyroburstsourcepath", "Pyro Burst Source", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setHelp("Path to Pyro Burst Source node.")
hou_parm_template2.setTags({"oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pyroburstattribs", "Burst Source Attributes", 1, default_value=(["node = pwd()\n\nburst_source_node = node.node(node.evalParm('pyroburstsourcepath'))\n\nnsourceattribs = burst_source_node.parm('number_of_sources').evalAsInt()\nsource_attribs = []\n\nfor i in range(1,nsourceattribs+1):\n    if burst_source_node.evalParm('source_create%d' % (i)):\n        source_attrib = burst_source_node.parm('source_attrib%d' % (i)).evalAsString()\n        prefix = \"\"\n        if burst_source_node.evalParm('source_doprefix%d' % (i)):\n            prefix = \"burst_\"\n        source_attribs.append(prefix + source_attrib)\n\nif burst_source_node.evalParm('createvattrib'):\n    source_attribs.append('v')\n    \nreturn ' '.join(source_attribs)"]), default_expression=(["node = pwd()\n\nburst_source_node = node.node(node.evalParm('pyroburstsourcepath'))\n\nnsourceattribs = burst_source_node.parm('number_of_sources').evalAsInt()\nsource_attribs = []\n\nfor i in range(1,nsourceattribs+1):\n    if burst_source_node.evalParm('source_create%d' % (i)):\n        source_attrib = burst_source_node.parm('source_attrib%d' % (i)).evalAsString()\n        prefix = \"\"\n        if burst_source_node.evalParm('source_doprefix%d' % (i)):\n            prefix = \"burst_\"\n        source_attribs.append(prefix + source_attrib)\n\nif burst_source_node.evalParm('createvattrib'):\n    source_attribs.append('v')\n    \nreturn ' '.join(source_attribs)"]), default_expression_language=([hou.scriptLanguage.Python]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setHelp("Get all Pyro Burst Source Attributes dynamically.")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ButtonParmTemplate("optimalvoxelsize", "Update Optimal Voxel Size")
hou_parm_template2.setHelp("Calculates an Optimal Voxel Size based on the Particle Scale. The Optimal Voxel Size helps the Rasterize node to produce fast rasterization regardless the size of the Pyro Burst. Lower the value if you want higher Voxel Count")
hou_parm_template2.setScriptCallback("node = kwargs['node']\n\nburst_source_node = node.node(node.evalParm('pyroburstsourcepath'))\n\n# Get Voxel Size\ngeo = burst_source_node.node(\"GET_OPTIMAL_VOXELSIZE\").geometry()\nvoxelsize = 0.1\n\nif geo:\n    voxelsize = geo.floatAttribValue(\"voxelsize\")    \n\nnode.parm(\"voxelsize\").set(voxelsize)")
hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python)
hou_parm_template2.setTags({"script_callback": "node = kwargs['node']\n\nburst_source_node = node.node(node.evalParm('pyroburstsourcepath'))\n\n# Get Voxel Size\ngeo = burst_source_node.node(\"GET_OPTIMAL_VOXELSIZE\").geometry()\nvoxelsize = 0.1\n\nif geo:\n    voxelsize = geo.floatAttribValue(\"voxelsize\")    \n\nnode.parm(\"voxelsize\").set(voxelsize)", "script_callback_language": "python"})
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
hou_node.setParmTemplateGroup(hou_parm_template_group)
# Code for /obj/axiom/axiom/volumeRasterizeAttributes/attributes parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes")
hou_parm = hou_node.parm("attributes")
hou_parm.deleteAllKeyframes()
hou_parm.set("density temperature burn v")
hou_parm.setAutoscope(True)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("chs(\"pyroburstattribs\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("chs(\"pyroburstattribs\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("chs(\"pyroburstattribs\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("chs(\"pyroburstattribs\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/volumeRasterizeAttributes/filterbysrcattrib parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes")
hou_parm = hou_node.parm("filterbysrcattrib")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/volumeRasterizeAttributes/voxelsize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes")
hou_parm = hou_node.parm("voxelsize")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.10000000000000001)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"../pyroBurstSource/trailingsep\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"../pyroBurstSource/trailingsep\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"../pyroBurstSource/trailingsep\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"../pyroBurstSource/trailingsep\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/volumeRasterizeAttributes/densityattrib parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes")
hou_parm = hou_node.parm("densityattrib")
hou_parm.deleteAllKeyframes()
hou_parm.set("")


# Code for /obj/axiom/axiom/volumeRasterizeAttributes/normalize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes")
hou_parm = hou_node.parm("normalize")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/volumeRasterizeAttributes/attribrules parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes")
hou_parm = hou_node.parm("attribrules")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/volumeRasterizeAttributes/pyroburstsourcepath parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes")
hou_parm = hou_node.parm("pyroburstsourcepath")
hou_parm.deleteAllKeyframes()
hou_parm.set("../pyroBurstSource")


# Code for /obj/axiom/axiom/volumeRasterizeAttributes/pyroburstattribs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes")
hou_parm = hou_node.parm("pyroburstattribs")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = pwd()\n\nburst_source_node = node.node(node.evalParm('pyroburstsourcepath'))\n\nnsourceattribs = burst_source_node.parm('number_of_sources').evalAsInt()\nsource_attribs = []\n\nfor i in range(1,nsourceattribs+1):\n    if burst_source_node.evalParm('source_create%d' % (i)):\n        source_attrib = burst_source_node.parm('source_attrib%d' % (i)).evalAsString()\n        prefix = \"\"\n        if burst_source_node.evalParm('source_doprefix%d' % (i)):\n            prefix = \"burst_\"\n        source_attribs.append(prefix + source_attrib)\n\nif burst_source_node.evalParm('createvattrib'):\n    source_attribs.append('v')\n    \nreturn ' '.join(source_attribs)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = pwd()\n\nburst_source_node = node.node(node.evalParm('pyroburstsourcepath'))\n\nnsourceattribs = burst_source_node.parm('number_of_sources').evalAsInt()\nsource_attribs = []\n\nfor i in range(1,nsourceattribs+1):\n    if burst_source_node.evalParm('source_create%d' % (i)):\n        source_attrib = burst_source_node.parm('source_attrib%d' % (i)).evalAsString()\n        prefix = \"\"\n        if burst_source_node.evalParm('source_doprefix%d' % (i)):\n            prefix = \"burst_\"\n        source_attribs.append(prefix + source_attrib)\n\nif burst_source_node.evalParm('createvattrib'):\n    source_attribs.append('v')\n    \nreturn ' '.join(source_attribs)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = pwd()\n\nburst_source_node = node.node(node.evalParm('pyroburstsourcepath'))\n\nnsourceattribs = burst_source_node.parm('number_of_sources').evalAsInt()\nsource_attribs = []\n\nfor i in range(1,nsourceattribs+1):\n    if burst_source_node.evalParm('source_create%d' % (i)):\n        source_attrib = burst_source_node.parm('source_attrib%d' % (i)).evalAsString()\n        prefix = \"\"\n        if burst_source_node.evalParm('source_doprefix%d' % (i)):\n            prefix = \"burst_\"\n        source_attribs.append(prefix + source_attrib)\n\nif burst_source_node.evalParm('createvattrib'):\n    source_attribs.append('v')\n    \nreturn ' '.join(source_attribs)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = pwd()\n\nburst_source_node = node.node(node.evalParm('pyroburstsourcepath'))\n\nnsourceattribs = burst_source_node.parm('number_of_sources').evalAsInt()\nsource_attribs = []\n\nfor i in range(1,nsourceattribs+1):\n    if burst_source_node.evalParm('source_create%d' % (i)):\n        source_attrib = burst_source_node.parm('source_attrib%d' % (i)).evalAsString()\n        prefix = \"\"\n        if burst_source_node.evalParm('source_doprefix%d' % (i)):\n            prefix = \"burst_\"\n        source_attribs.append(prefix + source_attrib)\n\nif burst_source_node.evalParm('createvattrib'):\n    source_attribs.append('v')\n    \nreturn ' '.join(source_attribs)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/volumeRasterizeAttributes/attribute1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes")
hou_parm = hou_node.parm("attribute1")
hou_parm.deleteAllKeyframes()
hou_parm.set("v")


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___toolid___", "pyro_burn")
hou_node.setUserData("___Version___", "")
hou_node.setUserData("___toolcount___", "2")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom/axiom/pyroTrailPath
hou_node = hou_parent.createNode("pyrotrailpath", "pyroTrailPath", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(7.68043, -5.81303))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom/axiom/pyroTrailPath/spreadangle parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("spreadangle")
hou_parm.deleteAllKeyframes()
hou_parm.set(180)


# Code for /obj/axiom/axiom/pyroTrailPath/vscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("vscale")
hou_parm.deleteAllKeyframes()
hou_parm.set(48)


# Code for /obj/axiom/axiom/pyroTrailPath/startframe_mode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("startframe_mode")
hou_parm.deleteAllKeyframes()
hou_parm.set("attrib")


# Code for /obj/axiom/axiom/pyroTrailPath/startframe_offset parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("startframe_offset")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailPath/dosfextent parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("dosfextent")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailPath/sfextent_frame parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("sfextent_frame")
hou_parm.deleteAllKeyframes()
hou_parm.set(3)


# Code for /obj/axiom/axiom/pyroTrailPath/traildurframe parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("traildurframe")
hou_parm.deleteAllKeyframes()
hou_parm.set(24)


# Code for /obj/axiom/axiom/pyroTrailPath/radiuslen_ramp1value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("radiuslen_ramp1value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailPath/radiuslen_ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("radiuslen_ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.25)


# Code for /obj/axiom/axiom/pyroTrailPath/radiuslen_ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("radiuslen_ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.14999999999999999)


# Code for /obj/axiom/axiom/pyroTrailPath/radiuslen_ramp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("radiuslen_ramp3pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.84426820278167725)


# Code for /obj/axiom/axiom/pyroTrailPath/radiuslen_ramp4pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("radiuslen_ramp4pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailPath/sfextent_ramp1interp parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("sfextent_ramp1interp")
hou_parm.deleteAllKeyframes()
hou_parm.set("linear")


# Code for /obj/axiom/axiom/pyroTrailPath/sfextent_ramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("sfextent_ramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailPath/sfextent_ramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("sfextent_ramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailPath/sfextent_ramp2interp parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailPath")
hou_parm = hou_node.parm("sfextent_ramp2interp")
hou_parm.deleteAllKeyframes()
hou_parm.set("linear")


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("wirestyle", "rounded")
hou_node.setUserData("___toolid___", "geometry_pyrosimpleexplosion")
hou_node.setUserData("___Version___", "")
hou_node.setUserData("___toolcount___", "2")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom/axiom/pyroTrailSource
hou_node = hou_parent.createNode("pyrotrailsource", "pyroTrailSource", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(7.68043, -6.81303))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom/axiom/pyroTrailSource/folder01 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("folder01")
hou_parm.deleteAllKeyframes()
hou_parm.set(2)


# Code for /obj/axiom/axiom/pyroTrailSource/trailingsep parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("trailingsep")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.050000000000000003)


# Code for /obj/axiom/axiom/pyroTrailSource/len parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("len")
hou_parm.deleteAllKeyframes()
hou_parm.set(2.5)


# Code for /obj/axiom/axiom/pyroTrailSource/shape_enablenoise parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("shape_enablenoise")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/shape_noisesize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("shape_noisesize")
hou_parm.deleteAllKeyframes()
hou_parm.set(3)


# Code for /obj/axiom/axiom/pyroTrailSource/enablesourcedurationscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("enablesourcedurationscale")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/number_of_sources parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("number_of_sources")
hou_parm.deleteAllKeyframes()
hou_parm.set(2)


# Code for /obj/axiom/axiom/pyroTrailSource/vscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("vscale")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.10000000000000001)


# Code for /obj/axiom/axiom/pyroTrailSource/vaddnoise parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("vaddnoise")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/radtrailingramp1value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("radtrailingramp1value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/radtrailingramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("radtrailingramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/sourcedurationramp1value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("sourcedurationramp1value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/sourcedurationramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("sourcedurationramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.64999997615814209)


# Code for /obj/axiom/axiom/pyroTrailSource/sourcedurationramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("sourcedurationramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/sourcedurationramp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("sourcedurationramp3pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/sourcetrailingramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("sourcetrailingramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.34999999403953552)


# Code for /obj/axiom/axiom/pyroTrailSource/sourcetrailingramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("sourcetrailingramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.14999999999999999)


# Code for /obj/axiom/axiom/pyroTrailSource/sourcetrailingramp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("sourcetrailingramp3pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.64999997615814209)


# Code for /obj/axiom/axiom/pyroTrailSource/sourcetrailingramp3value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("sourcetrailingramp3value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/sourcetrailingramp4pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("sourcetrailingramp4pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/sourcetrailingramp4value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("sourcetrailingramp4value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/source_create1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("source_create1")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/source_doprefix1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("source_doprefix1")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/source_noiseenable1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("source_noiseenable1")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/source_noisesize1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("source_noisesize1")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.20000000000000001)


# Code for /obj/axiom/axiom/pyroTrailSource/source_noiserough1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("source_noiserough1")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.75)


# Code for /obj/axiom/axiom/pyroTrailSource/source_dolencorrect1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("source_dolencorrect1")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/source_colornoiseramp1_1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm_tuple = hou_node.parmTuple("source_colornoiseramp1_1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.29999999999999999, 0.1875, 0.074999999999999997))


# Code for /obj/axiom/axiom/pyroTrailSource/source_colornoiseramp1_2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("source_colornoiseramp1_2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/source_colornoiseramp1_2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm_tuple = hou_node.parmTuple("source_colornoiseramp1_2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.10000000000000001, 0.050000000000000003, 0.01))


# Code for /obj/axiom/axiom/pyroTrailSource/source_create2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("source_create2")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/source_attrib2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("source_attrib2")
hou_parm.deleteAllKeyframes()
hou_parm.set("temperature")


# Code for /obj/axiom/axiom/pyroTrailSource/source_doprefix2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("source_doprefix2")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/source_dolenscale2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("source_dolenscale2")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/source_lenscale2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("source_lenscale2")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.5)


# Code for /obj/axiom/axiom/pyroTrailSource/source_colornoiseramp2_1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm_tuple = hou_node.parmTuple("source_colornoiseramp2_1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.29999999999999999, 0.1875, 0.074999999999999997))


# Code for /obj/axiom/axiom/pyroTrailSource/source_colornoiseramp2_2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm = hou_node.parm("source_colornoiseramp2_2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroTrailSource/source_colornoiseramp2_2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroTrailSource")
hou_parm_tuple = hou_node.parmTuple("source_colornoiseramp2_2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.10000000000000001, 0.050000000000000003, 0.01))


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
hou_node.setUserData("wirestyle", "rounded")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom/axiom/volumeRasterizeAttributes_trail
hou_node = hou_parent.createNode("volumerasterizeattributes", "volumeRasterizeAttributes_trail", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(7.68043, -7.81303))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

hou_parm_template_group = hou.ParmTemplateGroup()
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("folder2", "General", folder_type=hou.folderType.Simple, default_value=0, ends_tab_group=False)
hou_parm_template.setTags({"group_type": "simple"})
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("points", "Group", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="opmenu -l rasterize points", item_generator_script_language=hou.scriptLanguage.Hscript, menu_type=hou.menuType.StringToggle)
hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_action": "import soputils\nkwargs['geometrytype'] = (hou.geometryType.Points,)\nkwargs['inputindex'] = 0\nsoputils.selectGroupParm(kwargs)", "script_action_help": "Select geometry from an available viewport.\nShift-click to turn on Select Groups.", "script_action_icon": "BUTTONS_reselect", "sop_input": "1"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("attributes", "Attributes", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="r = []\nnode = hou.pwd()\ninputs = node.inputs()\nif inputs and inputs[0]:\n    geo = inputs[0].geometry()\n    if geo:\n        attrs = geo.pointAttribs()\n        for a in attrs:            \n            if a.dataType() == hou.attribData.Float and not a.isArrayType() and a.size() in [1, 3]:\n                r.extend([a.name(), a.name()])\nr.sort()\nreturn r", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringToggle)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("filterbysrcattrib", "Source Attribute", default_value=False)
hou_parm_template2.hideLabel(True)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python)
hou_parm_template2.setTags({"script_callback_language": "python"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("srcattrib", "Source Attribute", 1, default_value=(["source_name"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="r = []\nnode = hou.pwd()\ninputs = node.inputs()\nif inputs and inputs[0]:\n    geo = inputs[0].geometry()\n    if geo:\n        attrs = geo.pointAttribs()\n        for a in attrs:            \n            if a.dataType() == hou.attribData.String and not a.isArrayType() and a.size() == 1:\n                r.extend([a.name(), a.name()])\nr.sort()\nreturn r", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ filterbysrcattrib == 0 }")
hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python)
hou_parm_template2.setTags({"script_callback_language": "python"})
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("folder3", "Rasterization", folder_type=hou.folderType.Simple, default_value=0, ends_tab_group=False)
hou_parm_template.setTags({"group_type": "simple"})
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("filter", "Filter", 1, default_value=(["gauss"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="opmenu -l rasterize0 filter", item_generator_script_language=hou.scriptLanguage.Hscript, menu_type=hou.menuType.Normal)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("voxelsize", "Voxel Size", 1, default_value=([0.1]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("particlescale", "Particle Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("minfilter", "Minimum Filter Size", 1, default_value=([0.75]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.SeparatorParmTemplate("sepparm")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("velocityblur", "Velocity Blur", default_value=False, default_expression='off', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("shutter", "Shutter", 1, default_value=([0.5]), min=0, max=1, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ velocityblur == 0 }")
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("shutteroffset", "Shutter Offset", 1, default_value=([1]), min=-1, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ velocityblur == 0 }")
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("blursamples", "Blur Samples", 1, default_value=([4]), min=1, max=10, min_is_strict=True, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ velocityblur == 0 }")
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.SeparatorParmTemplate("sepparm2")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("densityattrib", "Coverage Attribute", 1, default_value=(["density"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="r = []\nnode = hou.pwd()\ninputs = node.inputs()\nif inputs and inputs[0]:\n    geo = inputs[0].geometry()\n    if geo:\n        attrs = geo.pointAttribs()\n        for a in attrs:            \n            if a.dataType() == hou.attribData.Float and not a.isArrayType() and a.size() == 1:\n                r.extend([a.name(), a.name()])\nr.sort()\nreturn r", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("densityscale", "Coverage Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("normalize", "Normalize by Clamped Coverage", default_value=False, default_expression='off', default_expression_language=hou.scriptLanguage.Hscript)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("attribrules", "Attribute Rules", folder_type=hou.folderType.MultiparmBlock, default_value=0, ends_tab_group=False)
hou_parm_template2.setTags({"autoscope": "0000000000000000"})
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("attribute#", "Attributes", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="r = []\nnode = hou.pwd()\ninputs = node.inputs()\nif inputs and inputs[0]:\n    geo = inputs[0].geometry()\n    if geo:\n        attrs = geo.pointAttribs()\n        for a in attrs:            \n            if a.dataType() == hou.attribData.Float and not a.isArrayType() and a.size() in [1, 3]:\n                r.extend([a.name(), a.name()])\nr.sort()\nreturn r", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringToggle)
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("rule#", "Method", menu_items=(["wavg","threshold","accumulated","stochastic"]), menu_labels=(["Weighted Average","Covered Average","Accumulated","Stochastic"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("pyro_trail_source", "Pyro Trail Source Helper", folder_type=hou.folderType.Collapsible, default_value=0, ends_tab_group=False)
hou_parm_template.setTags({"group_type": "collapsible"})
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pyrotrailsourcepath", "Pyro Trail Source", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setHelp("Path to Pyro Trail Source node.")
hou_parm_template2.setTags({"oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pyrotrailattribs", "Trail Source Attributes", 1, default_value=(["node = pwd()\n\ntrail_source_node = node.node(node.evalParm('pyrotrailsourcepath'))\n\nnsourceattribs = trail_source_node.parm('number_of_sources').evalAsInt()\nsource_attribs = []\n\nfor i in range(1,nsourceattribs+1):\n    if trail_source_node.evalParm('source_create%d' % (i)):\n        source_attrib = trail_source_node.parm('source_attrib%d' % (i)).evalAsString()\n        prefix = \"\"\n        if trail_source_node.evalParm('source_doprefix%d' % (i)):\n            prefix = \"trail_\"\n        source_attribs.append(prefix + source_attrib)\n\nif trail_source_node.evalParm('createvattrib'):\n    source_attribs.append('v')\n    \nreturn ' '.join(source_attribs)"]), default_expression=(["node = pwd()\n\ntrail_source_node = node.node(node.evalParm('pyrotrailsourcepath'))\n\nnsourceattribs = trail_source_node.parm('number_of_sources').evalAsInt()\nsource_attribs = []\n\nfor i in range(1,nsourceattribs+1):\n    if trail_source_node.evalParm('source_create%d' % (i)):\n        source_attrib = trail_source_node.parm('source_attrib%d' % (i)).evalAsString()\n        prefix = \"\"\n        if trail_source_node.evalParm('source_doprefix%d' % (i)):\n            prefix = \"trail_\"\n        source_attribs.append(prefix + source_attrib)\n\nif trail_source_node.evalParm('createvattrib'):\n    source_attribs.append('v')\n    \nreturn ' '.join(source_attribs)"]), default_expression_language=([hou.scriptLanguage.Python]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setHelp("Get all Pyro Trail Source Attributes dynamically.")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ButtonParmTemplate("optimalvoxelsize", "Update Optimal Voxel Size")
hou_parm_template2.setHelp("Calculates an Optimal Voxel Size based on the Particle Scale. The Optimal Voxel Size helps the Rasterize node to produce fast rasterization regardless the size of the Pyro Burst. Lower the value if you want higher Voxel Count")
hou_parm_template2.setScriptCallback("node = kwargs['node']\n\ntrail_source_node = node.node(node.evalParm('pyrotrailsourcepath'))\n\n# Get Voxel Size\ngeo = trail_source_node.node(\"GET_OPTIMAL_VOXELSIZE\").geometry()\nvoxelsize = 0.1\n\nif geo:\n    voxelsize = geo.floatAttribValue(\"voxelsize\")    \n\nnode.parm(\"voxelsize\").set(voxelsize)")
hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python)
hou_parm_template2.setTags({"script_callback": "node = kwargs['node']\n\ntrail_source_node = node.node(node.evalParm('pyrotrailsourcepath'))\n\n# Get Voxel Size\ngeo = trail_source_node.node(\"GET_OPTIMAL_VOXELSIZE\").geometry()\nvoxelsize = 0.1\n\nif geo:\n    voxelsize = geo.floatAttribValue(\"voxelsize\")    \n\nnode.parm(\"voxelsize\").set(voxelsize)", "script_callback_language": "python"})
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
hou_node.setParmTemplateGroup(hou_parm_template_group)
# Code for /obj/axiom/axiom/volumeRasterizeAttributes_trail/attributes parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes_trail")
hou_parm = hou_node.parm("attributes")
hou_parm.deleteAllKeyframes()
hou_parm.set("trail_density trail_temperature v")
hou_parm.setAutoscope(True)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("chs(\"pyrotrailattribs\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("chs(\"pyrotrailattribs\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("chs(\"pyrotrailattribs\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("chs(\"pyrotrailattribs\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/volumeRasterizeAttributes_trail/filterbysrcattrib parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes_trail")
hou_parm = hou_node.parm("filterbysrcattrib")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/volumeRasterizeAttributes_trail/voxelsize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes_trail")
hou_parm = hou_node.parm("voxelsize")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.050000000000000003)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"../pyroTrailSource/trailingsep\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"../pyroTrailSource/trailingsep\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"../pyroTrailSource/trailingsep\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.interpretAccelAsRatio(False)
hou_keyframe.setExpression("ch(\"../pyroTrailSource/trailingsep\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/volumeRasterizeAttributes_trail/densityattrib parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes_trail")
hou_parm = hou_node.parm("densityattrib")
hou_parm.deleteAllKeyframes()
hou_parm.set("")


# Code for /obj/axiom/axiom/volumeRasterizeAttributes_trail/normalize parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes_trail")
hou_parm = hou_node.parm("normalize")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/volumeRasterizeAttributes_trail/attribrules parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes_trail")
hou_parm = hou_node.parm("attribrules")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/volumeRasterizeAttributes_trail/pyrotrailsourcepath parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes_trail")
hou_parm = hou_node.parm("pyrotrailsourcepath")
hou_parm.deleteAllKeyframes()
hou_parm.set("../pyroTrailSource")


# Code for /obj/axiom/axiom/volumeRasterizeAttributes_trail/pyrotrailattribs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes_trail")
hou_parm = hou_node.parm("pyrotrailattribs")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = pwd()\n\ntrail_source_node = node.node(node.evalParm('pyrotrailsourcepath'))\n\nnsourceattribs = trail_source_node.parm('number_of_sources').evalAsInt()\nsource_attribs = []\n\nfor i in range(1,nsourceattribs+1):\n    if trail_source_node.evalParm('source_create%d' % (i)):\n        source_attrib = trail_source_node.parm('source_attrib%d' % (i)).evalAsString()\n        prefix = \"\"\n        if trail_source_node.evalParm('source_doprefix%d' % (i)):\n            prefix = \"trail_\"\n        source_attribs.append(prefix + source_attrib)\n\nif trail_source_node.evalParm('createvattrib'):\n    source_attribs.append('v')\n    \nreturn ' '.join(source_attribs)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = pwd()\n\ntrail_source_node = node.node(node.evalParm('pyrotrailsourcepath'))\n\nnsourceattribs = trail_source_node.parm('number_of_sources').evalAsInt()\nsource_attribs = []\n\nfor i in range(1,nsourceattribs+1):\n    if trail_source_node.evalParm('source_create%d' % (i)):\n        source_attrib = trail_source_node.parm('source_attrib%d' % (i)).evalAsString()\n        prefix = \"\"\n        if trail_source_node.evalParm('source_doprefix%d' % (i)):\n            prefix = \"trail_\"\n        source_attribs.append(prefix + source_attrib)\n\nif trail_source_node.evalParm('createvattrib'):\n    source_attribs.append('v')\n    \nreturn ' '.join(source_attribs)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = pwd()\n\ntrail_source_node = node.node(node.evalParm('pyrotrailsourcepath'))\n\nnsourceattribs = trail_source_node.parm('number_of_sources').evalAsInt()\nsource_attribs = []\n\nfor i in range(1,nsourceattribs+1):\n    if trail_source_node.evalParm('source_create%d' % (i)):\n        source_attrib = trail_source_node.parm('source_attrib%d' % (i)).evalAsString()\n        prefix = \"\"\n        if trail_source_node.evalParm('source_doprefix%d' % (i)):\n            prefix = \"trail_\"\n        source_attribs.append(prefix + source_attrib)\n\nif trail_source_node.evalParm('createvattrib'):\n    source_attribs.append('v')\n    \nreturn ' '.join(source_attribs)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.StringKeyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("node = pwd()\n\ntrail_source_node = node.node(node.evalParm('pyrotrailsourcepath'))\n\nnsourceattribs = trail_source_node.parm('number_of_sources').evalAsInt()\nsource_attribs = []\n\nfor i in range(1,nsourceattribs+1):\n    if trail_source_node.evalParm('source_create%d' % (i)):\n        source_attrib = trail_source_node.parm('source_attrib%d' % (i)).evalAsString()\n        prefix = \"\"\n        if trail_source_node.evalParm('source_doprefix%d' % (i)):\n            prefix = \"trail_\"\n        source_attribs.append(prefix + source_attrib)\n\nif trail_source_node.evalParm('createvattrib'):\n    source_attribs.append('v')\n    \nreturn ' '.join(source_attribs)", hou.exprLanguage.Python)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/axiom/volumeRasterizeAttributes_trail/attribute1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/volumeRasterizeAttributes_trail")
hou_parm = hou_node.parm("attribute1")
hou_parm.deleteAllKeyframes()
hou_parm.set("v")


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___toolid___", "pyro_burn")
hou_node.setUserData("___Version___", "")
hou_node.setUserData("___toolcount___", "2")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom/axiom/merge_for_sim
hou_node = hou_parent.createNode("merge", "merge_for_sim", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.68043, -11.057))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom/axiom/pyroLook
hou_node = hou_parent.createNode("pyrobakevolume", "pyroLook", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(5.68043, -14.1688))
hou_node.bypass(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(True)
hou_node.setTemplateFlag(True)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom/axiom/pyroLook/densityscale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("densityscale")
hou_parm.deleteAllKeyframes()
hou_parm.set(10)


# Code for /obj/axiom/axiom/pyroLook/enablescatter parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("enablescatter")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroLook/kscatter parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("kscatter")
hou_parm.deleteAllKeyframes()
hou_parm.set(1250)


# Code for /obj/axiom/axiom/pyroLook/scattersourcerange parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm_tuple = hou_node.parmTuple("scattersourcerange")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 3))


# Code for /obj/axiom/axiom/pyroLook/radius parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("radius")
hou_parm.deleteAllKeyframes()
hou_parm.set(5)


# Code for /obj/axiom/axiom/pyroLook/scattermask_center parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("scattermask_center")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.10000000000000001)


# Code for /obj/axiom/axiom/pyroLook/enablesecfire parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("enablesecfire")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroLook/ksecfire parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("ksecfire")
hou_parm.deleteAllKeyframes()
hou_parm.set(125)


# Code for /obj/axiom/axiom/pyroLook/smokecolorramp1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm_tuple = hou_node.parmTuple("smokecolorramp1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.20000000000000001, 0.20000000000000001, 0.20000000000000001))


# Code for /obj/axiom/axiom/pyroLook/smokecolorramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("smokecolorramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroLook/smokecolorramp2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm_tuple = hou_node.parmTuple("smokecolorramp2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.10000000149011612, 0.10000000149011612, 0.10000000149011612))


# Code for /obj/axiom/axiom/pyroLook/scattercolor2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("scattercolor2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroLook/scattercolor2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm_tuple = hou_node.parmTuple("scattercolor2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 0.32500000000000001, 0.10000000149011612))


# Code for /obj/axiom/axiom/pyroLook/scattermaskramp1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm_tuple = hou_node.parmTuple("scattermaskramp1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))


# Code for /obj/axiom/axiom/pyroLook/scattermaskramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("scattermaskramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroLook/firekramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("firekramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroLook/firekramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("firekramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroLook/firecolorramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("firecolorramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroLook/firecolorramp2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm_tuple = hou_node.parmTuple("firecolorramp2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 0.32500000000000001, 0.10000000149011612))


# Code for /obj/axiom/axiom/pyroLook/firemaskramp1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm_tuple = hou_node.parmTuple("firemaskramp1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))


# Code for /obj/axiom/axiom/pyroLook/firemaskramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("firemaskramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroLook/secfirekramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("secfirekramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroLook/secfirekramp2value parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("secfirekramp2value")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroLook/secfirecolorramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm = hou_node.parm("secfirecolorramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/axiom/pyroLook/secfirecolorramp2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/pyroLook")
hou_parm_tuple = hou_node.parmTuple("secfirecolorramp2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 0.32500000000000001, 0.10000000149011612))


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("wirestyle", "rounded")
hou_node.setUserData("___toolid___", "geometry_pyroconfigureatmoshpericexplosion")
hou_node.setUserData("___Version___", "")
hou_node.setUserData("___toolcount___", "69")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Code for /obj/axiom/axiom/name_source
hou_node = hou_parent.createNode("name", "name_source", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(3.68043, -8.81538))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom/axiom/name_source/group1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/name_source")
hou_parm = hou_node.parm("group1")
hou_parm.deleteAllKeyframes()
hou_parm.set("@name=burn")


# Code for /obj/axiom/axiom/name_source/name1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/name_source")
hou_parm = hou_node.parm("name1")
hou_parm.deleteAllKeyframes()
hou_parm.set("fuel")


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom/axiom/name_trail
hou_node = hou_parent.createNode("name", "name_trail", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(7.68043, -8.81538))
hou_node.bypass(False)
hou_node.setDisplayFlag(False)
hou_node.hide(False)
hou_node.setHighlightFlag(False)
hou_node.setHardLocked(False)
hou_node.setSoftLocked(False)
hou_node.setSelectableTemplateFlag(False)
hou_node.setSelected(False)
hou_node.setRenderFlag(False)
hou_node.setTemplateFlag(False)
hou_node.setUnloadFlag(False)

# Code for /obj/axiom/axiom/name_trail/numnames parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/name_trail")
hou_parm = hou_node.parm("numnames")
hou_parm.deleteAllKeyframes()
hou_parm.set(3)


# Code for /obj/axiom/axiom/name_trail/group1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/name_trail")
hou_parm = hou_node.parm("group1")
hou_parm.deleteAllKeyframes()
hou_parm.set("@name=trail_temperature")


# Code for /obj/axiom/axiom/name_trail/name1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/name_trail")
hou_parm = hou_node.parm("name1")
hou_parm.deleteAllKeyframes()
hou_parm.set("temperature")


# Code for /obj/axiom/axiom/name_trail/group2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/name_trail")
hou_parm = hou_node.parm("group2")
hou_parm.deleteAllKeyframes()
hou_parm.set("@name=trail_density")


# Code for /obj/axiom/axiom/name_trail/name2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/name_trail")
hou_parm = hou_node.parm("name2")
hou_parm.deleteAllKeyframes()
hou_parm.set("density")


# Code for /obj/axiom/axiom/name_trail/group3 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/name_trail")
hou_parm = hou_node.parm("group3")
hou_parm.deleteAllKeyframes()
hou_parm.set("@name=burn")


# Code for /obj/axiom/axiom/name_trail/name3 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/axiom/name_trail")
hou_parm = hou_node.parm("name3")
hou_parm.deleteAllKeyframes()
hou_parm.set("fuel")


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "18.5.462")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("18.5.462")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code to establish connections for /obj/axiom/axiom/axiom_solver
hou_node = hou_parent.node("axiom_solver")
if hou_parent.node("merge_for_sim") is not None:
    hou_node.setInput(0, hou_parent.node("merge_for_sim"), 0)
# Code to establish connections for /obj/axiom/axiom/init_startframe
hou_node = hou_parent.node("init_startframe")
if hou_parent.node("explosion_center") is not None:
    hou_node.setInput(0, hou_parent.node("explosion_center"), 0)
# Code to establish connections for /obj/axiom/axiom/pyroBurstSource
hou_node = hou_parent.node("pyroBurstSource")
if hou_parent.node("init_startframe") is not None:
    hou_node.setInput(0, hou_parent.node("init_startframe"), 0)
# Code to establish connections for /obj/axiom/axiom/volumeRasterizeAttributes
hou_node = hou_parent.node("volumeRasterizeAttributes")
if hou_parent.node("pyroBurstSource") is not None:
    hou_node.setInput(0, hou_parent.node("pyroBurstSource"), 0)
# Code to establish connections for /obj/axiom/axiom/pyroTrailPath
hou_node = hou_parent.node("pyroTrailPath")
if hou_parent.node("init_startframe") is not None:
    hou_node.setInput(0, hou_parent.node("init_startframe"), 0)
# Code to establish connections for /obj/axiom/axiom/pyroTrailSource
hou_node = hou_parent.node("pyroTrailSource")
if hou_parent.node("pyroTrailPath") is not None:
    hou_node.setInput(0, hou_parent.node("pyroTrailPath"), 0)
# Code to establish connections for /obj/axiom/axiom/volumeRasterizeAttributes_trail
hou_node = hou_parent.node("volumeRasterizeAttributes_trail")
if hou_parent.node("pyroTrailSource") is not None:
    hou_node.setInput(0, hou_parent.node("pyroTrailSource"), 0)
# Code to establish connections for /obj/axiom/axiom/merge_for_sim
hou_node = hou_parent.node("merge_for_sim")
if hou_parent.node("name_source") is not None:
    hou_node.setInput(0, hou_parent.node("name_source"), 0)
if hou_parent.node("name_trail") is not None:
    hou_node.setInput(1, hou_parent.node("name_trail"), 0)
# Code to establish connections for /obj/axiom/axiom/pyroLook
hou_node = hou_parent.node("pyroLook")
if hou_parent.node("axiom_solver") is not None:
    hou_node.setInput(0, hou_parent.node("axiom_solver"), 0)
# Code to establish connections for /obj/axiom/axiom/name_source
hou_node = hou_parent.node("name_source")
if hou_parent.node("volumeRasterizeAttributes") is not None:
    hou_node.setInput(0, hou_parent.node("volumeRasterizeAttributes"), 0)
# Code to establish connections for /obj/axiom/axiom/name_trail
hou_node = hou_parent.node("name_trail")
if hou_parent.node("volumeRasterizeAttributes_trail") is not None:
    hou_node.setInput(0, hou_parent.node("volumeRasterizeAttributes_trail"), 0)

# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/axiom/key
hou_node = hou_parent.createNode("hlight::2.0", "key", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(0.82891, 3.61212))
hou_node.setSelectableInViewport(True)
hou_node.showOrigin(False)
hou_node.useXray(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

# Code for /obj/axiom/key/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((-16, 0, 0))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/key/r parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm_tuple = hou_node.parmTuple("r")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((-25.011623657810606, -54.49866088801371, 4.9292076022005006e-14))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/key/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/key/scale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("scale")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/key/dimmer parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("dimmer")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(True)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/key/caching parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("caching")
hou_parm.deleteAllKeyframes()
hou_parm.set(0)


# Code for /obj/axiom/key/light_type parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("light_type")
hou_parm.deleteAllKeyframes()
hou_parm.set("distant")


# Code for /obj/axiom/key/l_dimmer parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("l_dimmer")
hou_parm.setAutoscope(True)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/key/focal parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("focal")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/key/aperture parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("aperture")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/key/projection2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("projection2")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/key/attenramp1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm_tuple = hou_node.parmTuple("attenramp1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))


# Code for /obj/axiom/key/attenramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("attenramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.89999997600000003)


# Code for /obj/axiom/key/attenramp2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm_tuple = hou_node.parmTuple("attenramp2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))


# Code for /obj/axiom/key/attenramp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/key")
hou_parm = hou_node.parm("attenramp3pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___toolid___", "object_pointlight")
hou_node.setUserData("___Version___", "1")
hou_node.setUserData("___toolcount___", "1")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("1")
# Code for /obj/axiom/fill
hou_node = hou_parent.createNode("hlight::2.0", "fill", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(0.82891, 2.71996))
hou_node.setSelectableInViewport(True)
hou_node.showOrigin(False)
hou_node.useXray(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

# Code for /obj/axiom/fill/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((16, 0, 0))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/fill/r parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm_tuple = hou_node.parmTuple("r")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((33.715984016095391, 56.817922108058525, 1.2245709861449935e-06))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/fill/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/axiom/fill/scale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("scale")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


# Code for /obj/axiom/fill/dimmer parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("dimmer")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.32000000000000001)
hou_parm.setAutoscope(True)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/fill/caching parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("caching")
hou_parm.deleteAllKeyframes()
hou_parm.set(0)


# Code for /obj/axiom/fill/light_type parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("light_type")
hou_parm.deleteAllKeyframes()
hou_parm.set("distant")


# Code for /obj/axiom/fill/light_color parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm_tuple = hou_node.parmTuple("light_color")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((0.53031551837921143, 0.87517815828323364, 1))


# Code for /obj/axiom/fill/light_intensity parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("light_intensity")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.32000000000000001)


# Code for /obj/axiom/fill/l_dimmer parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("l_dimmer")
hou_parm.setAutoscope(True)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/fill/focal parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("focal")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/fill/aperture parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("aperture")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/fill/projection2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("projection2")

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/axiom/fill/attenramp1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm_tuple = hou_node.parmTuple("attenramp1c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))


# Code for /obj/axiom/fill/attenramp2pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("attenramp2pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(0.89999997600000003)


# Code for /obj/axiom/fill/attenramp2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm_tuple = hou_node.parmTuple("attenramp2c")
hou_parm_tuple.deleteAllKeyframes()
hou_parm_tuple.set((1, 1, 1))


# Code for /obj/axiom/fill/attenramp3pos parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/axiom/fill")
hou_parm = hou_node.parm("attenramp3pos")
hou_parm.deleteAllKeyframes()
hou_parm.set(1)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___toolid___", "object_pointlight")
hou_node.setUserData("___Version___", "1")
hou_node.setUserData("___toolcount___", "1")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("1")

# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

]]></script>
  </tool>
</shelfDocument>
